{
  "_args": [
    [
      {
        "raw": "mychannel-logger@git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
        "scope": null,
        "escapedName": "mychannel-logger",
        "name": "mychannel-logger",
        "rawSpec": "git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
        "spec": "https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
        "type": "git"
      },
      "/Users/rittidate/Downloads/frontend-web"
    ]
  ],
  "_from": "git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
  "_id": "mychannel-logger@2.3.0",
  "_inCache": true,
  "_location": "/mychannel-logger",
  "_phantomChildren": {
    "async": "1.0.0",
    "colors": "1.0.3",
    "cycle": "1.0.3",
    "eyes": "0.1.8",
    "hoek": "4.2.1",
    "isstream": "0.1.2",
    "joi": "10.6.0",
    "oppsy": "1.0.2",
    "pumpify": "1.3.6",
    "stack-trace": "0.0.9"
  },
  "_requested": {
    "raw": "mychannel-logger@git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
    "scope": null,
    "escapedName": "mychannel-logger",
    "name": "mychannel-logger",
    "rawSpec": "git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
    "spec": "https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
    "type": "git"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#f1976dd2db103532e279658766435a7f71afabbb",
  "_shasum": "fe0d56c3eb9bcba97f961d10c7431b30af07402a",
  "_shrinkwrap": null,
  "_spec": "mychannel-logger@git+https://vca.ais.co.th/myChannel/hapi-mychannel-logger.git#develop",
  "_where": "/Users/rittidate/Downloads/frontend-web",
  "author": {
    "name": "Watcharapong Nanthasan"
  },
  "dependencies": {
    "good": "~7.1.0",
    "good-console": "~6.4.0",
    "good-file": "~6.0.1",
    "good-squeeze": "~5.0.1",
    "hapi": "~16.1.0",
    "mkdirp": "~0.5.1",
    "moment": "~2.15.2",
    "raven": "2.1.0",
    "rotating-file-stream": "~1.1.8",
    "winston": "~2.3.1"
  },
  "description": "Logger for my channel application.",
  "devDependencies": {
    "@types/hapi": "16.0.0",
    "@types/node": "6.0.63",
    "@types/winston": "2.3.3"
  },
  "engines": {
    "node": "6.x.x"
  },
  "gitHead": "f1976dd2db103532e279658766435a7f71afabbb",
  "license": "ISC",
  "main": "lib/index.js",
  "name": "mychannel-logger",
  "optionalDependencies": {},
  "readme": "# Logger Plugin\n\n[Screen Shot 2560-02-23 at 11.16.08 AM.png](https://trello-attachments.s3.amazonaws.com/58a3cd82334c36810c838d68/58a408c05c6c96ab6b0953a8/93a228a3b034a359be453ea7e623374e/Screen_Shot_2560-02-23_at_11.16.08_AM.png) \n\n## ข้อมูลและตัวอย่างผลลัพธ์\nพัฒนา Plugin สำหรับการใช้งานในการบันทึก Log ของระบบ My Channel โดยประกอบไปด้วย\n\n    - Access Log บันทึกการเรียกใช้งาน API ของแต่ละ URI\n    - Info Log บันทึกการเรียกใช้งานและผลลัพธ์ API ของแต่ละ URI\n    - Service Log บันทึกการเรียกใช้งาน Backend API\n    - Root Log บันทึกการทำงานอื่นๆของระบบ สำหรับนักพัฒนา\n\n** เอกสารเพิ่มเติมอ่านได้จาก T19\\_Log\\_Description\n\n### Access Log.\n\nบัันทึกการเรียกใช้งาน API ของแต่ละ URI โดยจะทำการบันทึกอัตโนมัติหลังจากทำการติดตั้ง Plugin\n\nตัวอย่าง\n```\n2017-02-26 00:00:00.000|htt-/0.0.0.0:3000|192.168.1.1|12345678900987654321|GET|/customerinfo|{\"x-api-request-id\":\"12345678900987654321\"}|{}|{}\n```\n\n### Info Log.\n\nบัันทึกการเรียกใช้งานและผลลัพธ์ API ของแต่ละ URI โดยจะทำการบันทึกอัตโนมัติหลังจากทำการติดตั้ง Plugin\n\nตัวอย่าง\n```\n2017-02-26 00:00:00.000|htt-/0.0.0.0:3000|192.168.1.1|12345678900987654321|GET|/customerinfo|{\"x-api-request-id\":\"12345678900987654321\"}|{}|{}|200|{\"reusltCode\":\"000000\",\"description\":\"success\",\"developerMessage\":\"success\",\"data\":[{},{}]}|100.111\n```\n\n### Service Log.\n\nบันทึกการเรียกใช้งาน Backend API โดยทำการบันทีกผ่านคำสั่ง ```server.emit('service', eventData);``` ซึ่งสามารถดูรายละเอียดที่ด้านล่างเอกสาร\n\nตัวอย่าง\n```\n2017-02-26 00:00:00.000|htt-/0.0.0.0:3000|192.168.1.1|12345678900987654321|GET|/customerinfo|{\"x-api-request-id\":\"12345678900987654321\"}|{}|{}|200|{\"reusltCode\":\"000000\",\"description\":\"success\",\"developerMessage\":\"success\",\"data\":[{},{}]}|100.111\n```\n\n### Root Log.\n\nบันทึกการทำงานอื่นๆของระบบ สำหรับนักพัฒนา โดยผ่านคำสั่ง ```server.log(logMessage);```\n\nตัวอย่าง\n```\n2017-02-26 00:00:00.000|htt-/0.0.0.0:3000|192.168.1.1|12345678900987654321|Example Message\n```\n\n---\n\n## Installation\n```\n$ yarn add git+ssh://git@git.onlineosd.com/mychannel/hapi-mychannel-logger.git#1.0.1\nหรือ\n$ yarn add git+https://git@git.onlineosd.com/mychannel/hapi-mychannel-logger.git#1.0.1\n```\n\n## Simple Usage\n\nเมื่อทำการปลั๊กอินติดตั้งระบบจะสามารถบันทึก Access Log และ Info Log โดยอัตโนมัติ\n\n```\nimport * as Hapi from 'hapi';\nimport * as Glue from 'glue';\n\nconst host = process.env.HOST || '127.0.0.1';\nconst port = process.env.PORT || 3000;\n\nconst manifest = {\n    server: {\n        debug: {\n            request: ['error'],\n            log: ['error']\n        }\n    },\n    connections: [\n        {\n            host: host,\n            port: port\n        }\n    ],\n    registrations: [\n        {\n            plugin: {\n                register: 'mychannel-logger',\n                options: {\n                    log: {\n                        path: '/opt/ais-my-channel/logs',\n                        rotateTime: 15\n                    },\n                    headers: [\n                        'postman-token', 'user-agent'\n                    ],\n                    hiddenFields: ['password']\n                }\n            }\n        }\n    ]\n};\n\nconst options = {\n    relativeTo: __dirname\n};\n\nGlue.compose(manifest, options, (err, server : Hapi.Server) => {\n    if (err) {\n        throw err;\n    }\n\n    server.start(() => {\n        server.log(\"Hello World\", server.info);\n        console.log('server is runing.');\n    });\n});\n\n```\n\n## Configuration\n\n#### Composes a plugin object object where:\n\n+ `log` - an object having:\n    + `path` - path สำหรับการเก็บไฟล์ log\n    + `rotateTime` - ช่วงเวลาของการ rotate file ในหน่วยนาที ตัวอย่าง เช่น 15 \n+ `headers` - list ของ header ที่ต้องการนำมาแสดงใน log file ตัวอย่าง เช่น ['postman-token', 'user-agent']\n+ `hiddenFields` - list ของ field ใน object ของ payload ที่ไม่ต้องการแสดงค่าในไฟล์ log โดยจะใส่ '***' ในค่าของ field นั้น ตัวอย่าง ['password']\n\n---\n\n## การใช้งาน log ที่มี event 'service'\n\nโดยจะต้องมีการ emit event 'service' โดยใช้คำสั่ง \n\n```\nserver.emit('service', eventData);\n```\n\nซึ่งข้อมูลที่ส่งมาพร้อมกับ event จะมีรูปแบบตาม object ด้านล่าง\n\n```\n    {\n        name: '',       // service name\n        timestamp: \"111111111\",\n        request: {\n            id: \"\",\n            ip: \"\",\n            apiRequestId: \"\",\n            method: \"\",\n            uri: \"\",\n            headers: [],\n            params: [],\n            body: {}\n        },\n        response: {\n            status: \"\",\n            body: \"\",\n            time: \"\"\n        },\n        error: {\n            message: \"\",\n            instance: \"\"\n        }\n    };\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "lint": "tslint --project . --type-check",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "types": "types/lib/index.d.ts",
  "version": "2.3.0"
}
