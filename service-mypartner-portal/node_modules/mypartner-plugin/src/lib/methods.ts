import * as Hapi from 'hapi'
import * as Request from 'request-promise'
import * as Moment from 'moment'
import * as Fs from 'fs'
import * as Boom from 'boom'
// import * as Cron from 'cron'

require('tls').DEFAULT_CIPHERS = 'RSA'

import { IRepository, IRequest } from './interfaces'

import { Schema } from './schema';
import { ProfileInfoRepository } from './repositories/profile-info-repository'
import { ItemPaymentRepository } from './repositories/item-payment-repository'
import { OrderTrackingDetailRepository } from './repositories/order-tracking-detail-repository'
import { OrderTrackingRepository } from './repositories/order-tracking-repository';
import { BankAccountRepository } from './repositories/bank-account-repository';
import { AuthRepository } from './repositories/auth-repository';
import { LoginRepository } from './repositories/login-repository';
import { ConfirmOtpRepository } from './repositories/confirm-otp-repository';
import { CategoryNameRepository } from './repositories/category-name-repository';
import { MenusRepository } from './repositories/menus-repository';
import { UpdatePaymentCashRepository } from './repositories/update-payment-cash-repository';
import { UpdatePaymentCreditRepository } from './repositories/update-payment-credit-repository';
import { UserRepository } from './repositories/user-repository';
import { CategoryTradeRepository } from './repositories/category-trade-repository';
import { ProductCatalogRepository } from './repositories/product-catalog-repository';
import { TradeRepository } from './repositories/trade-repository';
import { SplitOrderRepository } from './repositories/split-order-repository';
import { CreateOrderRepository } from './repositories/create-order-repository';
import { CheckPORepository } from './repositories/check-po-repository';
import { CpcImageRepository } from './repositories/cpc-image-repository';
import { AnnouncementRepository } from './repositories/announcement-repository';
import { SearchApiRepository } from './repositories/search-api-repository';
import { VersionCheckRepository } from './repositories/vesion-check-repository';
import { ReleaseOrderRepository } from './repositories/release-order';
import { ArsOrderRepository } from './repositories/ars-order'


export default class SsbRegis {

  private server: Hapi.Server
  private options: any
  constructor(server: Hapi.Server, options: any) {
    this.server = server
    this.options = options
  }

  public init = () => {
    //  Get Method
    this.initSchema()

    let repositories: IRepository[] = [
      new ProfileInfoRepository(this.server, this.options),
      new ItemPaymentRepository(this.server, this.options),
      new OrderTrackingDetailRepository(this.server, this.options),
      new OrderTrackingRepository(this.server, this.options),
      new BankAccountRepository(this.server, this.options),
      new AuthRepository(this.server, this.options),
      new LoginRepository(this.server, this.options),
      new ConfirmOtpRepository(this.server, this.options),
      new CategoryNameRepository(this.server, this.options),
      new MenusRepository(this.server, this.options),
      new UpdatePaymentCashRepository(this.server, this.options),
      new UpdatePaymentCreditRepository(this.server, this.options),
      new UserRepository(this.server, this.options),
      new CategoryTradeRepository(this.server, this.options),
      new ProductCatalogRepository(this.server, this.options),
      new TradeRepository(this.server, this.options),
      new SplitOrderRepository(this.server, this.options),
      new CreateOrderRepository(this.server, this.options),
      new CheckPORepository(this.server, this.options),
      new CpcImageRepository(this.server, this.options),
      new AnnouncementRepository(this.server, this.options),
      new SearchApiRepository(this.server, this.options),
      new VersionCheckRepository(this.server, this.options),
      new ReleaseOrderRepository(this.server, this.options),
      new ArsOrderRepository(this.server, this.options)
    ];

    repositories.forEach((repository) => {
      repository.registerMethod();
    });

    var request: IRequest = {}
    this.server.methods.Regis.cronJob(request)
  }

  private initSchema = (): void => {
    let db: any = this.server.plugins['hapi-mongoose'].connection;
    let schema: Schema = new Schema();
    schema.initUserSchema(db);
    schema.initProductSchema(db);
    schema.initArsLocationWhiteListSchema(db);
  }

}
