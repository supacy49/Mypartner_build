import * as Hapi from hapi;

export interface IRegister {
    (server: Hapi.Server, options: any, next: () => void): void;
    attributes?: any;
}

export interface IRequest {
    id?: string;
    ip?: string;
    apiRequestId?: string;
}

export interface ILoggerData {
    name: string;
    timestamp: string;
    request: {
        id: string;
        ip: string;
        apiRequestId: string;
        method: string;
        uri: string;
        headers: any;
        params: any;
        body: any;
    };
    response: {
        status: number;
        body: any;
        time: number;
    };
    error: {
        message: string;
        instance: string;
    };
}

export interface ICustomerProfileParams {
    userIdData: string;
    optionGetCustomerInfo?: string;
    optionQueryPersonalInfo?: string[];
    optionGetPPCustInfo?: string;
    sgw?: string;
    dat?: string;
}

export interface ICustomerProfileAccountParams {
    userIdData: string;
    userEmailData: string;
    userTelData: string;
    nameRest?: string;
}


export interface ISimInfoParams {
    userIdData: string;
    optionGetSimSt?: string[];
}

export interface IServiceInfoParams {
    userIdData: string;
    optionQueryPersonalInfo?: string[];
    optionLstPPMbFt2?: string[];
}

export interface IPackageInfoParams {
    userIdData: string;
    optionQueryPersonalInfo?: string[];
    optionGetPPPckPromo?: string;
    optionLstPPSeVTrans?: string;
    optionLstPPMbFt2?: string;
    status?: string;
    startDate?: string;
    stopDate?: string;
}

export interface getProfileInfoParams {
    locationCode: number;
}

export interface orderTrackingParams {
    reqDealerCode: string;
    reqOrderNo: string;
    sapPoNo: string;
    orderDateFrom: string;
    orderDateTo: string;
    sapOrderNo: string;
}

export interface orderTrackingDetailParams {
    reqOrderNo: string;
    sapOrderNo: string;
}

export interface getItemPaymentParams {
    dealerCode: string;
    type: string;
    userName: string;
}

export interface getBankAccountParams {
    userName: string;
}

export interface updatePaymentCashParams {
    company: string;
    dealerCode: string;
    locationCode: string;
    totalOrder: number;
    totalCn: number;
    totalDn: number;
    totalDiscount: string;
    totalInterest: string;
    totalPayAmt: number;
    paymentCat: string;
    accountCode: string;
    userName: string;
    overdueWDS: string;
    overdueAWN_T: string;
    overdueAWN_O: string;
    productType: string;
    sapReceiptDtlList: object;
}

export interface updatePaymentCreditParams {
    company: string;
    dealerCode: string;
    locationCode: string;
    totalOrder: string;
    totalCn: string;
    totalDn: string;
    totalDiscount: number;
    totalInterest: string;
    totalPayAmt: string;
    sumOrdAmtOth: string;
    sumCnAmtOth: string;
    sumDnAmtOth: string;
    totalDisCountOth: string;
    totalPaidOth: string;
    sumOrdAmtService: string;
    sumCnAmtService: string;
    sumDnAmtService: string;
    totalDisCountService: string;
    totalPaidService: string;
    paymentCat: string;
    accountCode: string;
    userName: string;
    overdueWDS: string;
    overdueAWN_T: string;
    overdueAWN_O: string;
    productType: string;
    blocReceipt: string;
    sapReceiptDtlList: object;
}

export interface AuthParams {
    username: string;
    password: string;
}

export interface ConfirmOtpParams {
    authorization: string;
    xSsoidsSmsotpAuth: string;
}


export interface LoginParams {
    tokenID: string;
}


export interface MenusParams {
    xAuthorization: string;
}

export interface GetCategoryNameParams {
    listCompany: any;
    distChannel: string;
    customerGroup: string;
    dealerCode: string;
}

export interface CategoryTradeParams {
    sessionId: string;
    listPermission: any;
    page: string;
    master: string;
    paymentMethod: string;
    dealerCode: string;
    customerGroup: string;
    distChannel: string;
    locationCode: string;
}

export interface ListProductCatalogParams {
    sessionId: string;
    listPermission: any;
    page: string;
    master: string;
    paymentMethod: string;
    dealerCode: string;
    customerGroup: string;
    distChannel: string;
    locationCode: string;
}

export interface TradeDetailParams {
    sessionId: string;
    company: string;
    tradeMstId: number;
    tradeNo: string;
    paymentMethod: string;
    dealerCode: string;
    locationCode: string;
    customerGroup: string;
    distChannel: string;
    listPermission: any;
}

export interface TradeFilterParams {
    sessionId: string;
    dealerCode: string;
    locationCode: string;
    customerGroup: string;
    distChannel: string;
    listProduct: any;
}

export interface CalTradeNormalParams {
    sessionId: string,
    userid: string,
    dealerCode: string,
    locationCode: string,
    customerGroup: string,
    distChannel: string,
    tradeId: string,
    tradeCompany: string,
    tradeProductMstId: string,
    tradeSubType: string,
    promotionType: string,
    paymentMethod: string,
    listProductBuy: any,
    listZtdmRomInfoTw: any,
}

export interface SplitOrderParams {
    sessionId: string,
    userid: string,
    dealerCode: string,
    locationCode: string,
    customerGroup: string,
    distChannel: string,
    listCompany: any,
    shoppingCartList: any,
}

export interface CreateOrderParams {
    sessionId: string,
    userid: string,
    dealerCode: string,
    locationCode: string,
    customerGroup: string,
    distChannel: string,
    shCode: string,
    shAddress: string,
    pyCode: string,
    pyAddress: string,
    minimumCashList: any,
    minimumCreditList: any,
}

export interface CheckPODuplicateParams {
    dealerCode: string,
    listPoNo: any,
}

export interface CpcImageParams {
    consumer: string,
    brand: string,
    model: string,
    sku: string,
}

export interface IRepository {
    registerMethod: () => void;
}

export interface IUser {
    SESSION_ID: string;
    USERNAME: string;
    FULLNAME: string;
    ROLE: string;
    PARAMETER_TYPE: string;
    PARAMETER_VALUE: string;
    MY_CHANNEL_TOKEN: string;
}

export interface ValidateSessionParams {
    TOKEN: string;
    ACTION: string;
}
export interface KeepAliveUserParams {
    TOKEN: string;
    ACTION: string;
}

export interface GetUserTokenParams {
    MY_CHANNEL_TOKEN: string;
}

export interface AnnouncementParams {
    programCode?: string;
    dealerCode?: string;
}

export interface SearchApiParams {
    consumer?: string,
    tags: string
}

export interface GetEncryptTokenParams {
    username: string,
    location: string,
    extSystem: string
}

export interface ILocation {
    ROW_ID: string;
    PAR_ROW_ID: string;
    LOV_TYPE: string;
    LOV_NAME: string;
    DISPLAY_VAL: string;
    LOV_VAL1: string;
    LOV_VAL2: string;
    LOV_VAL3: string;
    LOV_VAL4: string;
    LOV_VAL5: string;
    ACTIVE_FLG: string;
    TEXT_DESC: string;
    ORDER_BY: string;
    MODIFICATION_NUM: Number;
    CREATED: Number;
    CREATED_BY: string;
    LAST_UPD: Number;
    LAST_UPD_BY: string;
    GROUP_TYPE: string;
    LOV_VAL6: string;
    LOV_VAL7: string;
    LOV_VAL8: string;
    LOV_VAL9: string;
    LOV_VAL10: string;
    ROWID: string;
    LOCATION_TYPE: string;
    REGION_CODE: string;
}

export interface UpdateVesionParams {
    platform: string
}

export interface QueryPaymentCash {
    dealerCode: string,
    listCompany: string[],
    listPaymentMethod: string[],
}

export interface ReleaseOrder {
    userId: string,
    dealerCode: string,
    listUnBlockOrder: ListUnBlockOrder[]

}

export interface ListUnBlockOrder {
    selected: boolean,
    key: string,
    groupOrderNo: string,
    PaymentType: string,
    statusOrder: string,
    sumPaidAmount: number,
    listAutoUnblockOrderDetailBean: [{
        company: string,
        sapOrderNo: string,
        dealerCode: string,
        groupOrderNo: string,
        paymentType: string,
        poNumber: string,
        productType: string,
        paymentTerm: string,
        paidAmount: number,
        dueDate: string,
        orderDate: string,
        createDate: string,
        createTime: string,
        status: string,
        statusCode: string
    }]
}

export interface ArsOrder {
    distributorLocationCode: string,
    retailLocationCode: string,
    startDate: string,
    endDate: string,
    orderNo: string,
    status: string,
    channel: string
}

export interface ArsOrderResponse {
    createTime: Date,
    distributorLocationCode: string,
    distributorLocationName: string,
    retailLocationCod: string,
    retailLocationName: string,
    total: number,
    status: string,
    productList: [
        {
            type: string,
            subType: string,
            title: string,
            description: string,
            price: number,
            subTotal: number,
            quantity: number
        }
    ]
}


