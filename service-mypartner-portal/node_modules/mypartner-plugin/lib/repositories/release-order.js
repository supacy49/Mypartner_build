"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Moment = require("moment");
const base_request_repository_1 = require("./base-request-repository");
require('tls').DEFAULT_CIPHERS = 'RSA';
class ReleaseOrderRepository extends base_request_repository_1.BaseRequestRepository {
    constructor() {
        super(...arguments);
        this.registerMethod = () => {
            this.server.method({
                name: 'Regis.queryAccBlock',
                method: this.queryAccBlock,
                options: {
                    callback: false
                }
            });
            this.server.method({
                name: 'Regis.releaseOrder',
                method: this.releaseOrder,
                options: {
                    callback: false
                }
            });
        };
        this.queryAccBlock = (request) => {
            let profileQueryOptions = {
                dealerCode: request.payload.dealerCode,
                listCompany: request.payload.listCompany,
                listPaymentMethod: request.payload.listPaymentMethod,
            };
            return this._queryAccBlock(request, profileQueryOptions);
        };
        this.releaseOrder = (request) => {
            let profileQueryOptions = {
                userId: request.payload.userId,
                dealerCode: request.payload.dealerCode,
                listUnBlockOrder: request.payload.listUnBlockOrder
            };
            return this._releaseOrder(request, profileQueryOptions);
        };
        this._queryAccBlock = (request, profileQueryOptions) => {
            let reqOptions = this._getReqOptionsPost(request);
            let now = Moment();
            reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
            reqOptions['rejectUnauthorized'] = false;
            reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-queryAccBlock'];
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['body'] = {
                dealerCode: profileQueryOptions.dealerCode,
                listCompany: profileQueryOptions.listCompany,
                listPaymentMethod: profileQueryOptions.listPaymentMethod,
            };
            reqOptions['json'] = true;
            const loggerName = 'tdm-service';
            return this.sendRequest(reqOptions, loggerName);
        };
        this._releaseOrder = (request, profileQueryOptions) => {
            let reqOptions = this._getReqOptionsPost(request);
            let now = Moment();
            reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
            reqOptions['rejectUnauthorized'] = false;
            reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-releaseOrder'];
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['body'] = {
                userId: profileQueryOptions.userId,
                dealerCode: profileQueryOptions.dealerCode,
                listUnBlockOrder: profileQueryOptions.listUnBlockOrder
            };
            reqOptions['json'] = true;
            const loggerName = 'tdm-service';
            return this.sendRequest(reqOptions, loggerName);
        };
    }
}
exports.ReleaseOrderRepository = ReleaseOrderRepository;
//# sourceMappingURL=release-order.js.map