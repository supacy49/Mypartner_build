export interface KafkaOptions {
    url: string;
    headers?: any;
}
export interface LogOptions {
    topics: string;
    message: IKafkaLogService | any;
}
export interface IKafkaLogInfo {
    'TIMESTAMP': string;
    'ID': string;
    'IP': IDictionary<string> | string;
    'REQUEST_ID': IDictionary<string> | string;
    'REQUEST_METHOD': string;
    'REQUEST_URI': string;
    'REQUEST_HEADER': IDictionary<string>;
    'REQUEST_PARAMS': IDictionary<string>;
    'REQUEST_BODY': any;
    'RESPONSE_STATUS': number;
    'RESPONSE_BODY': any;
    'RESPONSE_TIME': number;
    'CLIENT_MODULE': string;
    'CLIENT_PAGE_NAME': string;
    'CLIENT_ACTION': string;
    'CLIENT_PAGE_URL': string;
}
export interface IKafkaLogService {
    'SERVICE_ENDPOINT': string;
    'TIMESTAMP': string;
    'ID': string;
    'IP': IDictionary<string> | string;
    'REQUEST_ID': IDictionary<string> | string;
    'REQUEST_METHOD': string;
    'REQUEST_URI': string;
    'REQUEST_HEADER': IDictionary<string>;
    'REQUEST_PARAMS': IDictionary<string>;
    'REQUEST_BODY': any;
    'RESPONSE_STATUS': number;
    'RESPONSE_BODY': any;
    'RESPONSE_TIME': number;
    'ERROR_MESSAGE': string;
    'ERROR_INSTANCE': string;
}
interface IDictionary<T> {
    [key: string]: T;
}
export declare class KafkaLogger {
    options: any;
    constructor(options: KafkaOptions);
    send(options: LogOptions): void;
    getTopics(topics: string): string;
    getRequestBodyString(message: any): string;
    parseLogMessage(options: any): any;
    parseLogInfo(message: any): IKafkaLogInfo;
    getToken(requestHeader: any): any;
    parseLogService(message: any): IKafkaLogService;
    decodeJwt(token: string): string;
}
export {};
