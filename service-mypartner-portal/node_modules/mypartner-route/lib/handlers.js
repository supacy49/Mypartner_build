"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Boom = require("boom");
class Handler {
    constructor() {
        this._getRequestData = (request) => {
            return {
                id: request.id,
                ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
                apiRequestId: request.headers['x-api-request-id'] || ''
            };
        };
        this._handleError = (error) => {
            return Boom.create(500, 'ServerError', error);
        };
        this._getSsbError = (name, body) => {
            return Boom.create(500, 'SsbError', {
                name: name,
                body: body
            });
        };
        this._parseString = (value) => {
            return value || '';
        };
        this._parseRecentActivities = (body) => {
            let activities = [];
            let actionSuperScreens = body.data.AISWSQueryActivityByMobileResponse.outHierarchyMessage.ListOfActionsuperscreen;
            if ('ActionSuperScreen' in actionSuperScreens) {
                let count = 0;
                for (let action of actionSuperScreens.ActionSuperScreen) {
                    let activity = {
                        createdDate: this._parseString(action.ActionSuperScreen.CreatedDate),
                        subCategory: this._parseString(action.ActionSuperScreen.ActivitySubCategory),
                        status: this._parseString(action.ActionSuperScreen.Status)
                    };
                    activities.push(activity);
                    count += 1;
                    if (count === 21) {
                        break;
                    }
                }
            }
            return activities;
        };
        this.getProfileInfo = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .getProfileInfo(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getItemPayment = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .getItemPayment(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getCategoryName = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .getCategoryName(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getCategoryTrade = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getCategoryTrade(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.listProductCatalog = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .listProductCatalog(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getTradeDetail = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getTradeDetail(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.tradeFilter = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .tradeFilter(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.calTradeNormal = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .calTradeNormal(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.splitOrder = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .splitOrder(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.updatePaymentCash = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .updatePaymentCash(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.updatePaymentCredit = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .updatePaymentCredit(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getBankAccount = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getBankAccount(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.orderTracking = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .orderTracking(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.orderTrackingDetail = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .orderTrackingDetail(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.auth = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .auth(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.confirmOtp = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .confirmOtp(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.login = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .login(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.menus = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .menus(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.keepAlive = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .keepAlive(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.validateSession = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .validateSession(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.saveUser = (request, reply) => {
            let server = request.server;
            //let req : IRequest = this._getRequestData(request);
            server
                .methods
                .Regis
                .saveUser(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getUserToken = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getUserToken(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.createOrder = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .createOrder(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.chkPODuplicate = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .chkPODuplicate(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.cpcImage = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .cpcImage(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.announcement = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .announcement(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.announcementDealer = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .announcementDealer(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.searchApi = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .searchApi(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getEncryptToken = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getEncryptToken(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getSearchApi = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getSearchApi(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getUpdateVersion = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .getUpdateVersion(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.queryAccBlock = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .queryAccBlock(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.releaseOrder = (request, reply) => {
            let server = request.server;
            server
                .methods
                .Regis
                .releaseOrder(request)
                .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
                .catch(this._handleError)
                .then(reply);
        };
        this.getArsOrder = (request, reply) => {
            let server = request.server;
            server.methods.Regis.getArsOrder(request).then((response) => {
                console.log('response from catalog => ', response);
                let body = response.body;
                let output = null;
                return body;
            }).catch(this._handleError)
                .then(reply);
        };
        this.exportArs = (request, reply) => {
            console.log('in catalog');
            let server = request.server;
            server.methods.Regis.exportArs(request).then((response) => {
                console.log('response from catalog => ', response);
                let body = response.body;
                let output = null;
                return body;
            }).catch(this._handleError)
                .then(reply);
        };
        this.arslocation = (request, reply) => {
            console.log('in catalog');
            let server = request.server;
            server.methods.Regis.arslocation(request).then((response) => {
                console.log('response from catalog => ', response);
                let body = response.body;
                return body;
            }).catch(this._handleError)
                .then(reply);
        };
    }
}
exports.default = Handler;
//# sourceMappingURL=handlers.js.map