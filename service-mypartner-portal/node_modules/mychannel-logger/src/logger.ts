import * as mkdirp from 'mkdirp';
import * as path from 'path';
import * as Moment from "moment";

import { ILogOption, IInfoLog, IAccessLog, IRootLog, IServiceLog } from "./interfaces";
import { LoggerFormat } from './format';
import winston = require('winston');
import { LoggerOptions } from 'winston';

export default class Logger {
    private timestampFormat: string = "YYYYMMDD_HHmm";
    private loggerFormat: LoggerFormat;
    private logOption: ILogOption;
    private winstonInstance: winston.Logger;

    constructor(logOption: ILogOption) {
        this.winstonInstance = this.createWinstonLogger();
        this.loggerFormat = new LoggerFormat(null, null);
        this.logOption = logOption;
    }

    private createWinstonLogger(options?: LoggerOptions): winston.Logger {
        return winston.createLogger(options);
    }

    public accessLog = (message: IAccessLog): void => {
        let logger = this.createLogger('access', null);
        logger.info(this.loggerFormat.accessLogFormat(message));
        logger.close();
    }

    public infoLog = (message: IInfoLog): void => {
        let logger = this.createLogger('info', null);
        logger.info(this.loggerFormat.infoLogFormat(message));
        logger.close();
        logger.clear();
    }

    public rootLog = (message: IRootLog): void => {
        let logger = this.createLogger('root', null);
        logger.info(this.loggerFormat.rootLogFormat(message));
    }

    public serviceLog = (message: IServiceLog): void => {
        let logger = this.createLogger('service', message.name);
        logger.info(this.loggerFormat.serviceLogFormat(message));
        logger.close();
        logger.clear();
    }

    public emptyLogFormat(logType: string, serviceName: string): string {
        let pipe: string;

        switch (logType) {
            case 'access':
                pipe = `-|-|-|-|-|-|-|-|-|`; //9
                break;
            case 'info':
                pipe = `-|-|-|-|-|-|-|-|-|-|-|-|`; //12
                break;
            case 'root':
                pipe = `|-|-|-|-|`; // 5
                break;
            case 'service':
                pipe = `-|-|-|-|-|-|-|-|-|-|-|-|-|-|`; //14
                break;
            default:
                break;
        }

        let logger = this.createLogger(logType, serviceName);
        logger.info(pipe);
        logger.close();
        logger.clear();
        return pipe;
    }

    private createLogger = (logType: string, serviceName: string) => {
        let _timestamp: string = this.getTimestamp();
        let dirPath: string = path.join(this.logOption.path, logType, (serviceName || ''));
        mkdirp.sync(dirPath);

        const transports = new winston.transports.File({
            filename: `${serviceName || logType}.log.${_timestamp}`,
            dirname: dirPath,
            format: winston.format.printf(options => options.message ? options.message : '')
        })
        this.winstonInstance.add(transports);
        return this.winstonInstance;
    }


    private getTimestamp = (): string => {
        let timestamp: Moment.Moment = Moment();
        let minute: number = timestamp.minute();
        minute = (Math.floor(minute / this.logOption.rotateTime) * this.logOption.rotateTime);
        timestamp.minute(minute);
        return timestamp.format(this.timestampFormat);
    }
}