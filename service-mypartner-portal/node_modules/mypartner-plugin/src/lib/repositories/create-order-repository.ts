import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import {BaseRequestRepository} from "./base-request-repository"
import {CreateOrderParams, IRepository, IRequest} from "./../interfaces"
require('tls').DEFAULT_CIPHERS= 'RSA'

export class CreateOrderRepository extends BaseRequestRepository implements IRepository {


    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.createOrder',
            method: this.createOrder,
            options: {
              callback: false
            }
        })
    }

    private createOrder = (request: any) => {
    
        let orderQueryOptions: CreateOrderParams = {
          sessionId: request.payload.sessionId,
          userid: request.payload.userid,
          dealerCode: request.payload.dealerCode,
          locationCode: request.payload.locationCode,
          customerGroup: request.payload.customerGroup,
          distChannel: request.payload.distChannel,
          shCode: request.payload.shCode,
          shAddress: request.payload.shAddress,
          pyCode: request.payload.pyCode,
          pyAddress: request.payload.pyAddress,
          minimumCashList: request.payload.minimumCashList,
          minimumCreditList: request.payload.minimumCreditList
        }
    
        // console.log('request', request);
        return this._queryCreateOrder(request, orderQueryOptions)
    }

    private _queryCreateOrder = (request: IRequest, orderQueryOptions: CreateOrderParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-createOrder']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
                sessionId: orderQueryOptions.sessionId,
                userid: orderQueryOptions.userid,
                dealerCode: orderQueryOptions.dealerCode,
                locationCode: orderQueryOptions.locationCode,
                customerGroup: orderQueryOptions.customerGroup,
                distChannel: orderQueryOptions.distChannel,
                shCode: orderQueryOptions.shCode,
                shAddress: orderQueryOptions.shAddress,
                pyCode: orderQueryOptions.pyCode,
                pyAddress: orderQueryOptions.pyAddress,
                minimumCashList: orderQueryOptions.minimumCashList,
                minimumCreditList: orderQueryOptions.minimumCreditList
        }
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

}
