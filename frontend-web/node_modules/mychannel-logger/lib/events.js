"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Moment = require("moment");
const logger_1 = require("./logger");
class EventLogger {
    static init(server, eventOption) {
        this.logger = new logger_1.default(eventOption.log);
        server.on('request-internal', (request, event, tags) => {
            try {
                if (event.tags[0] === 'received') {
                    this.logger.accessLog({
                        timestamp: Moment(request.info.received).format(this.timestampFormat),
                        id: request.id,
                        ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
                        requestId: request.headers['x-api-request-id'] || '',
                        requestMethod: request
                            .method
                            .toUpperCase(),
                        requestUri: request.path,
                        requestHeaders: request.headers,
                        requestParams: request.url.query,
                        requestBody: this.logBody(request.payload, eventOption.hiddenFields)
                    });
                }
            }
            catch (err) {
                this.handleLogError(err, {
                    timestamp: Moment(request.info.received).format(this.timestampFormat),
                    id: request.id,
                    ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
                    requestId: request.headers['x-api-request-id'] || ''
                });
            }
        });
        server.on('response', (request) => {
            let headers = request.headers;
            try {
                this.logger.infoLog({
                    timestamp: Moment(request.info.received).format(this.timestampFormat),
                    id: request.id,
                    ip: headers['x-forwarded-for'] || request.info.remoteAddress,
                    requestId: headers['x-api-request-id'] || '',
                    requestMethod: request
                        .method
                        .toUpperCase(),
                    requestUri: request.path,
                    requestHeaders: headers,
                    requestParams: request.url.query,
                    requestBody: this.logBody(request.payload, eventOption.hiddenFields),
                    responseStatus: request.response.statusCode,
                    responseBody: request.response.source,
                    responseTime: this.calculateResponseTime(request),
                    clientModule: headers['x-client-module'] || '',
                    clientPageName: headers['x-client-page-name'] || '',
                    clientAction: headers['x-client-action'] || '',
                    clientPageUrl: headers['x-client-page-url'] || ''
                });
            }
            catch (err) {
                this.handleLogError(err, {
                    timestamp: Moment(request.info.received).format(this.timestampFormat),
                    id: request.id,
                    ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
                    requestId: request.headers['x-api-request-id'] || ''
                });
            }
        });
        server.on('request-error', (request, err) => {
            try {
                let _logMessage;
                if (err.data) {
                    if (err.data.body) {
                        _logMessage = JSON.stringify(err.data);
                    }
                    else {
                        _logMessage = err.data.stack || err.data.message;
                    }
                }
                else {
                    _logMessage = err.stack || err.message;
                }
                this.logger.rootLog({
                    timestamp: Moment(request.info.received).format(this.timestampFormat),
                    id: request.id,
                    ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
                    requestId: request.headers['x-api-request-id'] || '',
                    logMessage: _logMessage
                });
            }
            catch (err) {
                this.handleLogError(err, {
                    timestamp: Moment(request.info.received).format(this.timestampFormat),
                    id: request.id,
                    ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
                    requestId: request.headers['x-api-request-id'] || ''
                });
            }
        });
        server.event('service');
        server.on('service', (data, err) => {
            try {
                this.logger.serviceLog({
                    name: data.name,
                    timestamp: Moment(data.timestamp).format(this.timestampFormat),
                    id: data.request.id,
                    ip: data.request.ip,
                    requestId: data.request.apiRequestId,
                    requestMethod: data
                        .request
                        .method
                        .toUpperCase(),
                    requestUri: data.request.uri,
                    requestHeaders: data.request.headers,
                    requestParams: data.request.params,
                    requestBody: data.request.body,
                    responseStatus: data.response.status,
                    responseBody: this.logBody(data.response.body, eventOption.hiddenFields),
                    responseTime: data.response.time,
                    errorMessage: data.error.message,
                    errorInstance: data.error.instance
                });
            }
            catch (err) {
                this.handleLogError(err, {
                    timestamp: Moment(data.timestamp).format(this.timestampFormat),
                    id: data.request.id,
                    ip: data.request.ip,
                    requestId: data.request.apiRequestId
                });
            }
        });
    }
    static handleLogError(err, requestInfo) {
        this.logger.rootLog({
            timestamp: requestInfo.timestamp,
            id: requestInfo.id,
            ip: requestInfo.ip,
            requestId: requestInfo.requestId,
            logMessage: err.stack || err.message
        });
    }
    static isObject(obj) {
        return obj && typeof obj === 'object' && !Array.isArray(obj);
    }
    static logBody(requestBody, hiddenFields) {
        if (this.isObject(requestBody)) {
            hiddenFields
                .forEach((field) => {
                if (requestBody.hasOwnProperty(field)) {
                    requestBody[field] = '***';
                }
            });
        }
        return requestBody;
    }
    static calculateResponseTime(request) {
        let received = Moment(request.info.received);
        let responded = Moment(request.info.responded);
        let duration = Moment.duration(responded.diff(received));
        return duration.asMilliseconds();
    }
}
EventLogger.timestampFormat = "YYYY-MM-DD HH:mm:ss.SSS";
exports.EventLogger = EventLogger;
