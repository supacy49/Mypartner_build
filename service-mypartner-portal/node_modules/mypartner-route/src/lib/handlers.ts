import * as Hapi from "hapi";
import * as Boom from "boom";
import { IHandler, IRequest, IProfile, IActivity } from "./interfaces";

export default class Handler {
    constructor() { }

    public _getRequestData: (request: any) => IRequest = (request) => {
        return {
            id: request.id,
            ip: request.headers['x-forwarded-for'] || request.info.remoteAddress,
            apiRequestId: request.headers['x-api-request-id'] || ''
        };
    }

    private _handleError = (error) => {
        return Boom.create(500, 'ServerError', error);
    }

    private _getSsbError = (name: string, body: any) => {
        return Boom.create(500, 'SsbError', {
            name: name,
            body: body
        });
    }

    private _parseString: (value: string) => string = (value) => {
        return value || '';
    }



    private _parseRecentActivities: (body: any) => Array<IActivity> = (body) => {
        let activities: Array<IActivity> = [];
        let actionSuperScreens = body.data.AISWSQueryActivityByMobileResponse.outHierarchyMessage.ListOfActionsuperscreen;

        if ('ActionSuperScreen' in actionSuperScreens) {
            let count = 0;
            for (let action of actionSuperScreens.ActionSuperScreen) {
                let activity: IActivity = {
                    createdDate: this._parseString(action.ActionSuperScreen.CreatedDate),
                    subCategory: this._parseString(action.ActionSuperScreen.ActivitySubCategory),
                    status: this._parseString(action.ActionSuperScreen.Status)
                };
                activities.push(activity);
                count += 1;
                if (count === 21) {
                    break;
                }
            }
        }
        return activities;
    }





    public getProfileInfo: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .getProfileInfo(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }


    public getItemPayment: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .getItemPayment(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }
    public getCategoryName: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .getCategoryName(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }
    public getCategoryTrade: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getCategoryTrade(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public listProductCatalog: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .listProductCatalog(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }
    public getTradeDetail: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getTradeDetail(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public tradeFilter: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .tradeFilter(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }
    public calTradeNormal: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .calTradeNormal(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }
    public splitOrder: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .splitOrder(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }
    public updatePaymentCash: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .updatePaymentCash(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }

    public updatePaymentCredit: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .updatePaymentCredit(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }


    public getBankAccount: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getBankAccount(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;

            })
            .catch(this._handleError)
            .then(reply);
    }



    public orderTracking: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .orderTracking(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }




    public orderTrackingDetail: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .orderTrackingDetail(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }

    public auth: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .auth(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }

    public confirmOtp: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .confirmOtp(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }

    public login: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .login(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }


    public menus: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .menus(request)
            .then((response) => {

                let body = response.body;
                let output = null;
                return body;
                // if (body.resultCode === '200') {
                //     //let activities : Array < IActivity > = this._parseRecentActivities(body);
                //     // output = {
                //     //     activities: activities
                //     // };
                //     return body;
                // } else {
                //     return this._getSsbError('Regis.verifyMobile', body);
                // }
            })
            .catch(this._handleError)
            .then(reply);
    }

    public keepAlive: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .keepAlive(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }


    public validateSession: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .validateSession(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public saveUser: IHandler = (request, reply) => {
        let server: any = request.server;
        //let req : IRequest = this._getRequestData(request);

        server
            .methods
            .Regis
            .saveUser(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public getUserToken: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getUserToken(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public createOrder: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .createOrder(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public chkPODuplicate: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .chkPODuplicate(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public cpcImage: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .cpcImage(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public announcement: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .announcement(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public announcementDealer: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .announcementDealer(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public searchApi: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .searchApi(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public getEncryptToken: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getEncryptToken(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }


    public getSearchApi: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getSearchApi(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public getUpdateVersion: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .getUpdateVersion(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public queryAccBlock: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .queryAccBlock(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }


    public releaseOrder: IHandler = (request, reply) => {
        let server: any = request.server;

        server
            .methods
            .Regis
            .releaseOrder(request)
            .then((response) => {
                let body = response.body;
                let output = null;
                return body;
            })
            .catch(this._handleError)
            .then(reply);
    }

    public getArsOrder: IHandler = (request, reply) => {
        let server: any = request.server;
        server.methods.Regis.getArsOrder(request).then((response) => {
            console.log('response from catalog => ', response);
            let body = response.body;
            let output = null;
            return body;
        }).catch(this._handleError)
            .then(reply);
    }


    public exportArs: IHandler = (request, reply) => {
        console.log('in catalog');
        let server: any = request.server;
        server.methods.Regis.exportArs(request).then((response) => {
            console.log('response from catalog => ', response);
            let body = response.body;
            let output = null;
            return body;
        }).catch(this._handleError)
            .then(reply);
    }


    public arslocation: IHandler = (request, reply) => {
        console.log('in catalog');
        let server: any = request.server;
        server.methods.Regis.arslocation(request).then((response) => {
            console.log('response from catalog => ', response);
            let body = response.body;
            return body;
        }).catch(this._handleError)
            .then(reply);
    }
}