import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import { BaseRequestRepository } from "./base-request-repository"
import { IRepository, IRequest, ArsOrder, ArsOrderResponse } from "../interfaces"
require('tls').DEFAULT_CIPHERS = 'RSA'
import * as Excel from 'exceljs';
import { CpcImageRepository } from "./cpc-image-repository";

export class ArsOrderRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.getArsOrder',
            method: this.getArsOrder,
            options: {
                callback: false
            }
        })

        this.server.method({
            name: 'Regis.exportArs',
            method: this.exportArs,
            options: {
                callback: false
            }
        })

        this.server.method({
            name: 'Regis.arslocation',
            method: this.arslocation,
            options: {
                callback: false
            }
        })
    }

    private arslocation = (request: IRequest, param: any): Bluebird<any> => {
        let reqOptions = this._getReqOptionsPost(request)
        reqOptions['uri'] = "";
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {}
        const loggerName = 'ars-order';

        let db: any = this.getConnection();
        var $this = this
        let responsePromise = new Promise(function (resolve, reject) {
            db.model('arslocation').find({}).exec().then((res: any) => {
                let obj = {
                    "body": {
                        "resultCode": "S",
                        "resultMessage": "Success",
                        "locationCode": res[0].locationCode
                    }
                }
                $this.sendLog(reqOptions, loggerName, obj)
                resolve(obj)
            });
        });
        return responsePromise
    }

    private getArsOrder = (request: any) => {
        let arsOrderParam = request.payload;

        return this._getArsOrder(request, arsOrderParam);
    }


    private _getArsOrder = (request: IRequest, arsOrderParam: ArsOrder) => {
        let reqOptions = this._getReqOptionsPost(request);

        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
        reqOptions['rejectUnauthorized'] = false;

        reqOptions['uri'] = this.options['arsUrl'] + this.options.urlList['x-path-arsOrder'];
        reqOptions['headers']['Content-Type'] = 'application/json';

        reqOptions['body'] = arsOrderParam;
        reqOptions['json'] = true;

        const loggerName = 'ars-order';
        console.log('reqOptions => ', reqOptions);
        console.log('loggerName => ', loggerName);

        return this.sendRequest(reqOptions, loggerName);

        // TEST With local dev
        // var $this = this
        // let db: any = this.getConnection();
        // let responsePromise = new Promise(function (resolve, reject) {
        //     db.model('Arstest').find(arsOrderParam).then((ars: ArsOrderResponse) => {
        //         let obj = {
        //             "body": {
        //                 resultCode: "20000",
        //                 resultMessage: "Success",
        //                 data: ars
        //             }
        //         }
        //         $this.sendLog(reqOptions, loggerName, obj)
        //         resolve(obj)
        //     });
        // });
        // return responsePromise;
    };
    private exportArs = async (request: any) => {

        let params = request.payload;
        console.log('params => ', params)
        var $this = this
        const loggerName = 'ars-order';
        let reqOptions = this._getReqOptionsPost(request);
        let blob = await this.exportExcel(params);

        let responsePromise = await new Promise(function (resolve, reject) {
            let obj = {
                "body": {
                    resultCode: "20000",
                    resultMessage: "Success",
                    data: { blob: blob }
                }
            }
            $this.sendLog(reqOptions, loggerName, obj)
            resolve(obj)

        });
        return responsePromise;
    }

    private exportExcel(data) {

        var workbook = new Excel.Workbook();
        workbook.creator = 'Admin';
        workbook.created = new Date();
        workbook.modified = new Date();
        workbook.lastPrinted = new Date();
        workbook.addWorksheet(`Sheet1`, { views: [{ activeCell: 'A4', showGridLines: false }], pageSetup: { fitToPage: true, fitToHeight: 5, fitToWidth: 7 } })
        var sheet = workbook.getWorksheet(1);
        var row = sheet.getRow(1);
        row.getCell(1).font = {
            name: 'Arial Black',
            color: { argb: '8cc53f' },
            family: 2,
            size: 12
        };

        sheet.mergeCells('A1:F1');
        row.getCell(1).value = "Report ARS Order";
        row.commit()

        var row = sheet.getRow(3);
        row.alignment = { vertical: 'middle', horizontal: 'center' };
        row.fill = {
            type: 'pattern',
            pattern: "solid",
            fgColor: {
                argb: "8cc53f"
            },
            bgColor: {
                argb: "FF000000"
            }
        };
        row.border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
        };

        for (let i = 0; i <= 12; i++) {
            const count = i + 1;
            var col = sheet.getColumn(count);
            col.width = 15;
            if (count >= 11) {
                col.numFmt = '#,##0.00;[Red]-#,##0.00';
            }
        }

        row.getCell(1).value = "No.";
        row.getCell(2).value = "Order Date";
        row.getCell(3).value = "ARS Location Code";
        row.getCell(4).value = "ARS Location name";
        row.getCell(5).value = "Order No";
        row.getCell(6).value = "Status";
        row.getCell(7).value = "Product";
        row.getCell(8).value = "Product Brand";
        row.getCell(9).value = "Product Name";
        row.getCell(10).value = "Unit";
        row.getCell(11).value = "Amount";
        row.getCell(12).value = "Total Amount";
        row.commit();

        data.productList.forEach((val, i) => {
            let count = 4 + i;
            var row = sheet.getRow(count);
            row.alignment = { vertical: "middle", horizontal: 'center' };
            row.font = { bold: true };
            row.getCell(1).value = i + 1;
            row.getCell(2).value = this.convertDate(data.createTime);
            row.getCell(3).value = data.retailLocationCode;
            row.getCell(4).value = data.retailLocationName;
            row.getCell(5).value = data.orderNo;
            row.getCell(6).value = data.status;
            row.getCell(7).value = val.type;
            row.getCell(8).value = val.subType;
            row.getCell(9).value = val.title;
            row.getCell(10).value = val.quantity;
            row.getCell(11).value = val.price;
            row.getCell(12).value = val.subTotal;
            row.commit();
        })

        console.log(workbook.xlsx.writeBuffer());
        return workbook.xlsx.writeBuffer().then((res: any) => {
            console.log('res => ', res)
            return res
        });
    }

    convertDate(date) {
        let year = date.substr(0, 4);
        let month = date.substr(5, 2);
        let day = date.substr(8, 2);

        return day + '/' + month + '/' + year;
    }
}
