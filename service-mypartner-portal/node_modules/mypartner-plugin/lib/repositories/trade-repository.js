"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Moment = require("moment");
const base_request_repository_1 = require("./base-request-repository");
require('tls').DEFAULT_CIPHERS = 'RSA';
class TradeRepository extends base_request_repository_1.BaseRequestRepository {
    constructor() {
        super(...arguments);
        this.registerMethod = () => {
            this.server.method({
                name: 'Regis.getTradeDetail',
                method: this.getTradeDetail,
                options: {
                    callback: false
                }
            });
            this.server.method({
                name: 'Regis.tradeFilter',
                method: this.tradeFilter,
                options: {
                    callback: false
                }
            });
            this.server.method({
                name: 'Regis.calTradeNormal',
                method: this.calTradeNormal,
                options: {
                    callback: false
                }
            });
        };
        this.getTradeDetail = (request) => {
            let tradeDetailQueryOptions = {
                sessionId: request.payload.sessionId,
                company: request.payload.company,
                tradeMstId: request.payload.tradeMstId,
                tradeNo: request.payload.tradeNo,
                paymentMethod: request.payload.paymentMethod,
                dealerCode: request.payload.dealerCode,
                locationCode: request.payload.locationCode,
                customerGroup: request.payload.customerGroup,
                distChannel: request.payload.distChannel,
                listPermission: request.payload.listPermission
            };
            // console.log('request', request);
            return this._queryGetTradeDetail(request, tradeDetailQueryOptions);
        };
        this.tradeFilter = (request) => {
            let tradeFilterQueryOptions = {
                sessionId: request.payload.sessionId,
                dealerCode: request.payload.dealerCode,
                locationCode: request.payload.locationCode,
                customerGroup: request.payload.customerGroup,
                distChannel: request.payload.distChannel,
                listProduct: request.payload.listProduct
            };
            // console.log('request', request);
            return this._queryTradeFilter(request, tradeFilterQueryOptions);
        };
        this.calTradeNormal = (request) => {
            let calTradeNormalQueryOptions = {
                sessionId: request.payload.sessionId,
                userid: request.payload.userid,
                dealerCode: request.payload.dealerCode,
                locationCode: request.payload.locationCode,
                customerGroup: request.payload.customerGroup,
                distChannel: request.payload.distChannel,
                tradeId: request.payload.tradeId,
                tradeCompany: request.payload.tradeCompany,
                tradeProductMstId: request.payload.tradeProductMstId,
                tradeSubType: request.payload.tradeSubType,
                promotionType: request.payload.promotionType,
                paymentMethod: request.payload.paymentMethod,
                listProductBuy: request.payload.listProductBuy,
                listZtdmRomInfoTw: request.payload.listZtdmRomInfoTw,
            };
            // console.log('request', request);
            return this._queryCalTradeNormal(request, calTradeNormalQueryOptions);
        };
        this._queryGetTradeDetail = (request, profileQueryOptions) => {
            let reqOptions = this._getReqOptionsPost(request);
            let now = Moment();
            // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
            reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
            reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-tradeDetail'];
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['body'] = {
                sessionId: profileQueryOptions.sessionId,
                company: profileQueryOptions.company,
                tradeMstId: profileQueryOptions.tradeMstId,
                tradeNo: profileQueryOptions.tradeNo,
                paymentMethod: profileQueryOptions.paymentMethod,
                dealerCode: profileQueryOptions.dealerCode,
                locationCode: profileQueryOptions.locationCode,
                customerGroup: profileQueryOptions.customerGroup,
                distChannel: profileQueryOptions.distChannel,
                listPermission: profileQueryOptions.listPermission
            };
            reqOptions['json'] = true;
            const loggerName = 'tdm-service';
            return this.sendRequest(reqOptions, loggerName);
        };
        this._queryTradeFilter = (request, tradeFilterQueryOptions) => {
            let reqOptions = this._getReqOptionsPost(request);
            let now = Moment();
            // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
            reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
            reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-tradeFilter'];
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['body'] = {
                sessionId: tradeFilterQueryOptions.sessionId,
                dealerCode: tradeFilterQueryOptions.dealerCode,
                locationCode: tradeFilterQueryOptions.locationCode,
                customerGroup: tradeFilterQueryOptions.customerGroup,
                distChannel: tradeFilterQueryOptions.distChannel,
                listProduct: tradeFilterQueryOptions.listProduct
            };
            reqOptions['json'] = true;
            const loggerName = 'tdm-service';
            return this.sendRequest(reqOptions, loggerName);
        };
        this._queryCalTradeNormal = (request, calTradeNormalQueryOptions) => {
            let reqOptions = this._getReqOptionsPost(request);
            let now = Moment();
            // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
            reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
            reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-calTradeNormal'];
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['body'] = {
                sessionId: calTradeNormalQueryOptions.sessionId,
                userid: calTradeNormalQueryOptions.userid,
                dealerCode: calTradeNormalQueryOptions.dealerCode,
                locationCode: calTradeNormalQueryOptions.locationCode,
                customerGroup: calTradeNormalQueryOptions.customerGroup,
                distChannel: calTradeNormalQueryOptions.distChannel,
                tradeId: calTradeNormalQueryOptions.tradeId,
                tradeCompany: calTradeNormalQueryOptions.tradeCompany,
                tradeProductMstId: calTradeNormalQueryOptions.tradeProductMstId,
                tradeSubType: calTradeNormalQueryOptions.tradeSubType,
                promotionType: calTradeNormalQueryOptions.promotionType,
                paymentMethod: calTradeNormalQueryOptions.paymentMethod,
                listProductBuy: calTradeNormalQueryOptions.listProductBuy,
                listZtdmRomInfoTw: calTradeNormalQueryOptions.listZtdmRomInfoTw,
            };
            reqOptions['json'] = true;
            const loggerName = 'tdm-service';
            return this.sendRequest(reqOptions, loggerName);
        };
    }
}
exports.TradeRepository = TradeRepository;
//# sourceMappingURL=trade-repository.js.map