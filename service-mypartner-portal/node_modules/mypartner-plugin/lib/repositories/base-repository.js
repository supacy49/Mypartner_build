"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Moment = require("moment");
const Boom = require("boom");
class BaseRepository {
    constructor(server, options) {
        this.getConnection = () => {
            return this.server.plugins['hapi-mongoose'].connection;
        };
        this._getLoggerData = (reqOptions, loggerName, startTime, response, error) => {
            let now = Moment();
            let data = {
                name: loggerName,
                timestamp: now.format('YYYY-MM-DD HH:mm:ss'),
                request: {
                    id: reqOptions['id'],
                    ip: reqOptions['ip'],
                    apiRequestId: reqOptions['apiRequestId'],
                    method: reqOptions['method'],
                    uri: reqOptions['uri'],
                    headers: reqOptions['headers'],
                    params: reqOptions['qs'],
                    body: reqOptions['body']
                },
                response: {
                    status: response ? response.statusCode : error.statusCode,
                    body: response ? response.body : null,
                    time: Moment.duration(now.diff(startTime)).asMilliseconds()
                },
                error: {
                    message: error ? error.message : null,
                    instance: error ? error.name : null
                }
            };
            // console.log('data', data);
            return data;
        };
        this._getReqOptionsPost = (request) => {
            return {
                method: 'POST',
                id: request.id,
                apiRequestId: request.apiRequestId,
                headers: this.options.headers,
                resolveWithFullResponse: true,
                timeout: this.options['timeout'] || 2000
            };
        };
        this._getReqOptionsGet = (request) => {
            return {
                method: 'GET',
                id: request.id,
                headers: this.options.headers,
                resolveWithFullResponse: true,
                timeout: this.options['timeout'] || 2000
            };
        };
        this.sendLog = (reqOptions, loggerName, response) => {
            let now = Moment();
            console.log('send : ', reqOptions);
            this.server.emit('service', this._getLoggerData(reqOptions, loggerName, now, response, null));
        };
        this._validateJsonObject = response => {
            let body = response.body;
            console.log(body);
            if (typeof body == 'object') {
                return response;
            }
            else {
                throw Boom.create(500, 'JsonFormatError', {
                    name: 'JsonFormatError',
                    message: 'Incorrect JSON response',
                    body: body
                });
            }
        };
        this.server = server;
        this.options = options;
    }
}
exports.BaseRepository = BaseRepository;
//# sourceMappingURL=base-repository.js.map