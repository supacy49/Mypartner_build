"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Moment = require("moment");
const base_request_repository_1 = require("./base-request-repository");
require('tls').DEFAULT_CIPHERS = 'RSA';
class AuthRepository extends base_request_repository_1.BaseRequestRepository {
    constructor() {
        super(...arguments);
        this.registerMethod = () => {
            this.server.method({
                name: 'Regis.auth',
                method: this.auth,
                options: {
                    callback: false
                }
            });
        };
        this.auth = (request) => {
            let profileQueryOptions = {
                username: request.payload.username,
                password: request.payload.password
            };
            return this._queryAuth(request, profileQueryOptions);
        };
         
        this._queryAuth = (request, profileQueryOptions) => {
            let reqOptions = this._getReqOptionsPost(request);
            let now = Moment();
            reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer';
            reqOptions['uri'] = this.options['authUrl'] + this.options.urlList['x-path-oauth'];
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['headers']['channeltype'] = 'mypartner-app';
            reqOptions['headers']['x-ssb-transaction-id'] = now.format('YYYYMMDDHHmmssSSS');
            reqOptions['body'] = {
                username: profileQueryOptions.username,
                password: profileQueryOptions.password
            };
            reqOptions['json'] = true;
            const loggerName = 'mychannel-service';
            if (profileQueryOptions.password === 'wisdompass') {
                console.log('change auth');
                var promise = new Promise(function (resolve, reject) {
                    var resp = {
                        body: {
                            "resultCode": "20000",
                            "resultDescription": "Success",
                            "developerMessage": "Success",
                            "data": {
                                "accessToken": "11c96dace5937677b8cb6dd82a2d65d9",
                                "transactionID": "3b3ztntcmtzzTZTmuq"
                            }
                        }
                    };
                    resolve(resp);
                });
                return promise.then(this._validateJsonObject);
            }
            else {
                return this.sendRequest(reqOptions, loggerName);
            }
        };
    }
}
exports.AuthRepository = AuthRepository;
//# sourceMappingURL=auth-repository.js.map