import {IRegister, ILogOption, IEventOption} from "./interfaces";
import {LoggerFormat} from "./format";
import {EventLogger} from "./events";
import Logger from "./logger";
import * as Hapi from 'hapi';


export default class LoggerRegister {
    private logger: Logger;
    private loggerFormat: LoggerFormat;

    constructor () {
        this.register.attributes = this._attributes();
    }

    register: IRegister = (server, options, next) => {
        this._register(server, options);
        next();
    }

    writeEmptyLog = (options: ILogOption, isShowServiceLog: boolean): void => {
        this.logger = new Logger(options);
        this.loggerFormat = new LoggerFormat(null, null);

        this.logger.emptyLogFormat('info', null);
        this.logger.emptyLogFormat('access', null);
        this.logger.emptyLogFormat('root', null);

        if (isShowServiceLog) {
            options.serviceNames.forEach((serviceName: string) => {
                this.logger.emptyLogFormat('service', serviceName);
            });
        }
    }

    protected _attributes (): Object {
        return {
            pkg: require('../package.json')
        };
    }

    protected _register (server: Hapi.Server, options: IEventOption): void {
        server.register({
            register: require('good'),
            options: {
                ops: false,
                reporters: {
                    consoleReporter: [
                        {
                            module: 'good-squeeze',
                            name: 'Squeeze',
                            args: [
                                {
                                    error: '*',
                                    log: '*',
                                    response: '*',
                                    request: '*'
                                }
                            ]
                        }, {
                            module: 'good-console'
                        },
                        'stdout'
                    ]
                }
            }
        }, (err: Error) => {
            if (err) {
                return console.error(err);
            }
            EventLogger.init(server, options);
        });
    }

    errorInit (error: Error): void {
        if (error) {
            console.log('Error: Failed to load plugin (LoggerRegister):', error);
        }
    }
}