import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import {BaseRequestRepository} from "./base-request-repository"
import {CategoryTradeParams, IRepository, IRequest} from "./../interfaces"
require('tls').DEFAULT_CIPHERS= 'RSA'

export class CategoryTradeRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.getCategoryTrade',
            method: this.getCategoryTrade,
            options: {
              callback: false
            }
        })
    }

    private getCategoryTrade = (request: any) => {
    
        let profileQueryOptions: CategoryTradeParams = {
          sessionId: request.payload.sessionId,
          listPermission: request.payload.listPermission,
          page: request.payload.page,
          master: request.payload.master,
          paymentMethod: request.payload.paymentMethod,
          dealerCode: request.payload.dealerCode,
          customerGroup: request.payload.customerGroup,
          distChannel: request.payload.distChannel,
          locationCode: request.payload.locationCode
        }
    
        // console.log('request', request);
        return this._queryGetCategoryTrade(request, profileQueryOptions)
    }

    private _queryGetCategoryTrade = (request: IRequest, profileQueryOptions: CategoryTradeParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-confirm-otp'])
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-getCategoryTrade']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
          sessionId: profileQueryOptions.sessionId,
          listPermission: profileQueryOptions.listPermission,
          page: profileQueryOptions.page,
          master: profileQueryOptions.master,
          paymentMethod: profileQueryOptions.paymentMethod,
          dealerCode: profileQueryOptions.dealerCode,
          customerGroup: profileQueryOptions.customerGroup,
          distChannel: profileQueryOptions.distChannel,
          locationCode: profileQueryOptions.locationCode
        }
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }
    
}
