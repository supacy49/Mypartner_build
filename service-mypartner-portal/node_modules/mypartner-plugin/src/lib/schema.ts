import * as Mongoose from 'mongoose';
import { any } from 'joi';

export class Schema {
    private schemaClass: any;
    constructor() {
        this.schemaClass = Mongoose.Schema;
    }

    initUserSchema = (db: Mongoose.Connection): void => {
        let userSchema: Mongoose.Schema = new this.schemaClass({
            SESSION_ID: String,
            USERNAME: String,
            FULLNAME: String,
            ROLE: String,
            PARAMETER_TYPE: String,
            PARAMETER_VALUE: String,
            MY_CHANNEL_TOKEN: String,
            __v: { type: Number, select: false }
        });
        userSchema.index({
            SESSION_ID: 'text',
            USERNAME: 'text',
            NAME: 'text'
        });
        db.model('User', userSchema);
    }

    initLocationSchema = (db: Mongoose.Connection): void => {
        let locationSchema: Mongoose.Schema = new this.schemaClass({
            ROW_ID: String,
            PAR_ROW_ID: String,
            LOV_TYPE: String,
            LOV_NAME: String,
            DISPLAY_VAL: String,
            LOV_VAL1: String,
            LOV_VAL2: String,
            LOV_VAL3: String,
            LOV_VAL4: String,
            LOV_VAL5: String,
            ACTIVE_FLG: String,
            TEXT_DESC: String,
            ORDER_BY: String,
            MODIFICATION_NUM: Number,
            CREATED: Number,
            CREATED_BY: String,
            LAST_UPD: Number,
            LAST_UPD_BY: String,
            GROUP_TYPE: String,
            LOV_VAL6: String,
            LOV_VAL7: String,
            LOV_VAL8: String,
            LOV_VAL9: String,
            LOV_VAL10: String,
            ROWID: String,
            LOCATION_TYPE: String,
            REGION_CODE: String,
            __v: { type: Number, select: false }
        });
        locationSchema.index({
            LOV_NAME: 'text',
            DISPLAY_VAL: 'text',
            LOV_VAL1: 'text',
            LOV_VAL2: 'text'
        });
        db.model('Location', locationSchema);
    }

    initProductSchema = (db: Mongoose.Connection): void => {
        let productSchema: Mongoose.Schema = new this.schemaClass({
            ROW_ID: String,
            TAG: String,
            PRODUCT_ID: Number,
            NAME: String,
            ATTRIBUTES: [Mongoose.Schema.Types.Mixed],
            IMAGES: [Mongoose.Schema.Types.Mixed],
            VARIATIONS: [Mongoose.Schema.Types.Mixed],
            PRICE: String,
            THUMBNAIL: String,
            __v: { type: Number, select: false }
        });
        productSchema.index({
            NAME: 'text',
            THUMBNAIL: 'text'
        });
        db.model('Product', productSchema);
    }

    initArsLocationWhiteListSchema = (db: Mongoose.Connection): void => {
        let ArsLocationWhiteListSchema: Mongoose.Schema = new this.schemaClass({
            locationCode: []
        });
        db.model('arslocation', ArsLocationWhiteListSchema, 'arslocation');
    }
}

