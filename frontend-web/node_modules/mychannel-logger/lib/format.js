"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Stream = require("stream");
class LoggerFormat extends Stream.Transform {
    constructor(options, stringify) {
        let _objectConstructor = Object;
        options = _objectConstructor.assign({}, options, { objectMode: true });
        super(options);
    }
    generalRequestInfo(loginInfo) {
        let timestamp = loginInfo.timestamp;
        let id = loginInfo.id;
        let ip = loginInfo.ip;
        let requestId = loginInfo.requestId;
        return `TIMESTAMP|${timestamp}|ID|${id}|IP|${ip}|REQUEST_ID|${requestId}|`;
    }
    infoLogFormat(loginInfo) {
        let requestMethod = loginInfo.requestMethod;
        let requestUri = loginInfo.requestUri;
        let requestHeader = this.stringify(loginInfo.requestHeaders);
        let requestParams = this.stringify(loginInfo.requestParams);
        let requestBody = this.stringify(loginInfo.requestBody);
        let responseStatus = loginInfo.responseStatus;
        let responseBody = this.stringify(loginInfo.responseBody);
        let responseTime = loginInfo.responseTime;
        let clientModule = loginInfo.clientModule;
        let clientPageName = loginInfo.clientPageName;
        let clientAction = loginInfo.clientAction;
        let clientPageUrl = loginInfo.clientPageUrl;
        return this.generalRequestInfo(loginInfo)
            + `REQUEST_METHOD|${requestMethod}|REQUEST_URI|${requestUri}|REQUEST_HEADER|${requestHeader}|`
            + `REQUEST_PARAMS|${requestParams}|REQUEST_BODY|${requestBody}|RESPONSE_STATUS${responseStatus}|RESPONSE_BODY|${responseBody}|`
            + `CLIENT_MODULE|${clientModule}|CLIENT_PAGE_NAME|${clientPageName}|CLIENT_ACTION|${clientAction}|CLIENT_PAGE_URL|${clientPageUrl}|RESPONSE_TIME|${responseTime}`;
    }
    accessLogFormat(loginInfo) {
        let requestMethod = loginInfo.requestMethod;
        let requestUri = loginInfo.requestUri;
        let requestHeader = this.stringify(loginInfo.requestHeaders);
        let requestParams = this.stringify(loginInfo.requestParams);
        let requestBody = this.stringify(loginInfo.requestBody);
        return this.generalRequestInfo(loginInfo)
            + `REQUEST_METHOD|${requestMethod}|REQUEST_URI|${requestUri}|REQUEST_HEADER|${requestHeader}|REQUEST_PARAMS|${requestParams}|REQUEST_BODY|${requestBody}`;
    }
    rootLogFormat(loginInfo) {
        let logMessage = loginInfo.logMessage;
        return this.generalRequestInfo(loginInfo)
            + `LOG_MESSAGE|${logMessage}`;
    }
    serviceLogFormat(loginInfo) {
        let requestMethod = loginInfo.requestMethod;
        let requestUri = loginInfo.requestUri;
        let requestHeader = this.stringify(loginInfo.requestHeaders);
        let requestParams = this.stringify(loginInfo.requestParams);
        let requestBody = this.stringify(loginInfo.requestBody);
        let responseStatus = loginInfo.responseStatus;
        let responseBody = this.stringify(loginInfo.responseBody);
        let responseTime = loginInfo.responseTime;
        let errorMessage = this.stringify(loginInfo.errorMessage);
        let errorInstance = loginInfo.errorInstance;
        return this.generalRequestInfo(loginInfo)
            + `REQUEST_METHOD|${requestMethod}|REQUEST_URI|${requestUri}|REQUEST_HEADER|${requestHeader}|REQUEST_PARAMS|${requestParams}|`
            + `REQUEST_BODY|${requestBody}|RESPONSE_STATUS|${responseStatus}|RESPONSE_BODY|${responseBody}|`
            + `RESPONSE_TIME|${responseTime}|ERROR_MESSAGE|${errorMessage}|ERROR_INSTANCE|${errorInstance}`;
    }
    stringify(data) {
        try {
            let jsonData = JSON.stringify(data);
            if ((jsonData === '{}' || jsonData === '[]' || !data || data === null)) {
                return '';
            }
            else {
                return jsonData
                    .replace(/\|/g, '\\:')
                    .trim();
            }
        }
        catch (err) {
            return 'Error: ' + err.message;
        }
    }
}
exports.LoggerFormat = LoggerFormat;
