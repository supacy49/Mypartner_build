import * as Hapi from "hapi";
import * as Stream from 'stream';
import { IInfoLog, IAccessLog, IRootLog, IServiceLog } from "./interfaces";

export class LoggerFormat extends Stream.Transform {

    constructor(options: any, stringify: any) {
        let _objectConstructor: any = Object;
        options = _objectConstructor.assign({}, options, { objectMode: true });
        super(options);
    }

    generalRequestInfo(loginInfo: IInfoLog | IAccessLog | IRootLog | IServiceLog): string {
        let timestamp: string = loginInfo.timestamp;
        let id: string = loginInfo.id;
        let ip: string | Hapi.IDictionary<string> = loginInfo.ip;
        let requestId: string | Hapi.IDictionary<string> = loginInfo.requestId;
        return `TIMESTAMP|${timestamp}|ID|${id}|IP|${ip}|REQUEST_ID|${requestId}|`;
    }

    infoLogFormat(loginInfo: IInfoLog): string {
        let requestMethod: string = loginInfo.requestMethod;
        let requestUri: string = loginInfo.requestUri;
        let requestHeader: string = this.stringify(loginInfo.requestHeaders);
        let requestParams: string = this.stringify(loginInfo.requestParams);
        let requestBody: string = this.stringify(loginInfo.requestBody);
        let responseStatus: number = loginInfo.responseStatus;
        let responseBody: string = this.stringify(loginInfo.responseBody);
        let responseTime: number = loginInfo.responseTime;
        let clientModule: string = loginInfo.clientModule;
        let clientPageName: string = loginInfo.clientPageName;
        let clientAction: string = loginInfo.clientAction;
        let clientPageUrl: string = loginInfo.clientPageUrl;
        return this.generalRequestInfo(loginInfo)
            + `REQUEST_METHOD|${requestMethod}|REQUEST_URI|${requestUri}|REQUEST_HEADER|${requestHeader}|`
            + `REQUEST_PARAMS|${requestParams}|REQUEST_BODY|${requestBody}|RESPONSE_STATUS${responseStatus}|RESPONSE_BODY|${responseBody}|`
            + `CLIENT_MODULE|${clientModule}|CLIENT_PAGE_NAME|${clientPageName}|CLIENT_ACTION|${clientAction}|CLIENT_PAGE_URL|${clientPageUrl}|RESPONSE_TIME|${responseTime}`;
    }

    accessLogFormat(loginInfo: IAccessLog): string {
        let requestMethod: string = loginInfo.requestMethod;
        let requestUri: string = loginInfo.requestUri;
        let requestHeader: string = this.stringify(loginInfo.requestHeaders);
        let requestParams: string = this.stringify(loginInfo.requestParams);
        let requestBody: string = this.stringify(loginInfo.requestBody);
        return this.generalRequestInfo(loginInfo)
            + `REQUEST_METHOD|${requestMethod}|REQUEST_URI|${requestUri}|REQUEST_HEADER|${requestHeader}|REQUEST_PARAMS|${requestParams}|REQUEST_BODY|${requestBody}`;
    }

    rootLogFormat(loginInfo: IRootLog): string {
        let logMessage: string = loginInfo.logMessage;
        return this.generalRequestInfo(loginInfo)
            + `LOG_MESSAGE|${logMessage}`;
    }

    serviceLogFormat(loginInfo: IServiceLog): string {
        let requestMethod: string = loginInfo.requestMethod;
        let requestUri: string = loginInfo.requestUri;
        let requestHeader: string = this.stringify(loginInfo.requestHeaders);
        let requestParams: string = this.stringify(loginInfo.requestParams);
        let requestBody: string = this.stringify(loginInfo.requestBody);
        let responseStatus: number = loginInfo.responseStatus;
        let responseBody: string = this.stringify(loginInfo.responseBody);
        let responseTime: number = loginInfo.responseTime;
        let errorMessage: string = this.stringify(loginInfo.errorMessage);
        let errorInstance: string = loginInfo.errorInstance;
        return this.generalRequestInfo(loginInfo)
            + `REQUEST_METHOD|${requestMethod}|REQUEST_URI|${requestUri}|REQUEST_HEADER|${requestHeader}|REQUEST_PARAMS|${requestParams}|`
            + `REQUEST_BODY|${requestBody}|RESPONSE_STATUS|${responseStatus}|RESPONSE_BODY|${responseBody}|`
            + `RESPONSE_TIME|${responseTime}|ERROR_MESSAGE|${errorMessage}|ERROR_INSTANCE|${errorInstance}`;
    }

    private stringify(data: any): string {
        try {
            let jsonData: string = JSON.stringify(data);
            if ((jsonData === '{}' || jsonData === '[]' || !data || data === null)) {
                return '';
            } else {
                return jsonData
                    .replace(/\|/g, '\\:')
                    .trim();
            }
        } catch (err) {
            return 'Error: ' + err.message;
        }
    }

}