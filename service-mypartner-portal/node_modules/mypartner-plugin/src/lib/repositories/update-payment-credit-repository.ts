import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import {BaseRequestRepository} from "./base-request-repository"
import {updatePaymentCreditParams, IRepository, IRequest} from "./../interfaces"
require('tls').DEFAULT_CIPHERS= 'RSA'

export class UpdatePaymentCreditRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.updatePaymentCredit',
            method: this.updatePaymentCredit,
            options: {
              callback: false
            }
        })
    }

    private updatePaymentCredit = (request: any) => {
        let profileQueryOptions: updatePaymentCreditParams = {
          company: request.payload.company,
          dealerCode: request.payload.dealerCode,
          locationCode: request.payload.locationCode,
          totalOrder: request.payload.totalOrder,
          totalCn: request.payload.totalCn,
          totalDn: request.payload.totalDn,
          totalDiscount: request.payload.totalDiscount,
          totalInterest: request.payload.totalInterest,
          totalPayAmt: request.payload.totalPayAmt,
          sumOrdAmtOth: request.payload.sumOrdAmtOth,
          sumCnAmtOth: request.payload.sumCnAmtOth,
          sumDnAmtOth: request.payload.sumDnAmtOth,
          totalDisCountOth: request.payload.totalDisCountOth,
          totalPaidOth: request.payload.totalPaidOth,
          sumOrdAmtService: request.payload.sumOrdAmtService,
          sumCnAmtService: request.payload.sumCnAmtService,
          sumDnAmtService: request.payload.sumDnAmtService,
          totalDisCountService: request.payload.totalDisCountService,
          totalPaidService: request.payload.totalPaidService,
          paymentCat: request.payload.paymentCat,
          accountCode: request.payload.accountCode,
          userName: request.payload.userName,
          overdueWDS: request.payload.overdueWDS,
          overdueAWN_T: request.payload.overdueAWN_T,
          overdueAWN_O: request.payload.overdueAWN_O,
          productType: request.payload.productType,
          blocReceipt: request.payload.blocReceipt,
          sapReceiptDtlList: request.payload.sapReceiptDtlList
        }
    
        console.log('request credit ======>', profileQueryOptions);
        return this._queryParmentCredit(request, profileQueryOptions)
      }
    
      private _queryParmentCredit = (request: IRequest, profileQueryOptions: updatePaymentCreditParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['rejectUnauthorized'] = false
    
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-updatePayment']
        reqOptions['headers']['Content-Type'] = 'application/json'
    
        reqOptions['body'] = {
          company: profileQueryOptions.company,
          dealerCode: profileQueryOptions.dealerCode,
          locationCode: profileQueryOptions.locationCode,
          totalOrder: profileQueryOptions.totalOrder,
          totalCn: profileQueryOptions.totalCn,
          totalDn: profileQueryOptions.totalDn,
          totalDiscount: profileQueryOptions.totalDiscount,
          totalInterest: profileQueryOptions.totalInterest,
          totalPayAmt: profileQueryOptions.totalPayAmt,
          sumOrdAmtOth: profileQueryOptions.sumOrdAmtOth,
          sumCnAmtOth: profileQueryOptions.sumCnAmtOth,
          sumDnAmtOth: profileQueryOptions.sumDnAmtOth,
          totalDisCountOth: profileQueryOptions.totalDisCountOth,
          totalPaidOth: profileQueryOptions.totalPaidOth,
          sumOrdAmtService: profileQueryOptions.sumOrdAmtService,
          sumCnAmtService: profileQueryOptions.sumCnAmtService,
          sumDnAmtService: profileQueryOptions.sumDnAmtService,
          totalDisCountService: profileQueryOptions.totalDisCountService,
          totalPaidService: profileQueryOptions.totalPaidService,
          paymentCat: profileQueryOptions.paymentCat,
          accountCode: profileQueryOptions.accountCode,
          userName: profileQueryOptions.userName,
          overdueWDS: profileQueryOptions.overdueWDS,
          overdueAWN_T: profileQueryOptions.overdueAWN_T,
          overdueAWN_O: profileQueryOptions.overdueAWN_O,
          productType: profileQueryOptions.productType,
          blocReceipt: profileQueryOptions.blocReceipt,
          sapReceiptDtlList: profileQueryOptions.sapReceiptDtlList
        }
    
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
      }
}
