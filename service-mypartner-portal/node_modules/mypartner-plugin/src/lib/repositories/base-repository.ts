import * as Hapi from "hapi";
import * as Mongoose from "mongoose";
import * as Moment from 'moment'
import * as Boom from 'boom';
import {ILoggerData, IRequest} from "./../interfaces"


export class BaseRepository {
    protected server: Hapi.Server;
    protected options: any
    
    constructor(server: Hapi.Server, options: any) {
        this.server = server;
        this.options = options;
    }

    protected getConnection = (): Mongoose.Connection => {
        return this.server.plugins['hapi-mongoose'].connection;
    }

    protected _getLoggerData = (
        reqOptions: any,
        loggerName: string,
        startTime: Moment.Moment,
        response: any,
        error: any
    ) => {
        let now = Moment()
        let data: ILoggerData = {
            name: loggerName,
            timestamp: now.format('YYYY-MM-DD HH:mm:ss'),
            request: {
                id: reqOptions['id'],
                ip: reqOptions['ip'],
                apiRequestId: reqOptions['apiRequestId'],
                method: reqOptions['method'],
                uri: reqOptions['uri'],
                headers: reqOptions['headers'],
                params: reqOptions['qs'],
                body: reqOptions['body']
            },
            response: {
                status: response ? response.statusCode : error.statusCode,
                body: response ? response.body : null,
                time: Moment.duration(now.diff(startTime)).asMilliseconds()
            },
            error: {
                message: error ? error.message : null,
                instance: error ? error.name : null
            }
        }
        // console.log('data', data);
        return data
    }

    protected _getReqOptionsPost = (request: IRequest) => {
        return {
            method: 'POST',
            id: request.id,
            apiRequestId: request.apiRequestId,
            headers: this.options.headers,
            resolveWithFullResponse: true,
            timeout: this.options['timeout'] || 2000
        }
    }
    protected _getReqOptionsGet = (request: IRequest) => {
        return {
            method: 'GET',
            id: request.id,
            headers: this.options.headers,
            resolveWithFullResponse: true,
            timeout: this.options['timeout'] || 2000
        }
    }


    protected sendLog = (reqOptions: any, loggerName: string, response: any) => {
        let now = Moment()
        console.log('send : ', reqOptions)
        this.server.emit('service', this._getLoggerData(reqOptions, loggerName, now, response, null))
    }

    protected _validateJsonObject = response => {
        let body = response.body
        console.log(body)
        if (typeof body == 'object') {
          return response
        } else {
          throw Boom.create(500, 'JsonFormatError', {
            name: 'JsonFormatError',
            message: 'Incorrect JSON response',
            body: body
          })
        }
    }

}
