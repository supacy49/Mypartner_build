import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import * as Cron from 'cron'
import {BaseRequestRepository} from "./base-request-repository"
import {
    AnnouncementParams, 
    IRepository, 
    IRequest
} from "./../interfaces"
require('tls').DEFAULT_CIPHERS= 'RSA'

export class AnnouncementRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.announcement',
            method: this.announcement,
            options: {
              callback: false
            }
        })

        this.server.method({
            name: 'Regis.announcementDealer',
            method: this.announcementDealer,
            options: {
              callback: false
            }
        })

    }
    
    private announcement = (request: any) => {
        let announceQueryOptions: AnnouncementParams = {
            programCode: request.payload.programCode
        }
    
        // console.log('request', request);
        return this._queryAnnoucement(request, announceQueryOptions)
    }

    private _queryAnnoucement = (request: IRequest, announceQueryOptions: AnnouncementParams) => {
        let reqOptions = this._getReqOptionsGet(request)
        let now = Moment()
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['rejectUnauthorized'] = false
    
        reqOptions['uri'] =
          this.options['baseUrl'] +
          this.options.urlList['x-path-getAnnouncement'] +
          '?programCode=' +
          announceQueryOptions.programCode
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

    private announcementDealer = (request: any) => {
        let announceQueryOptions: AnnouncementParams = {
            dealerCode: request.payload.dealerCode
        }
    
        // console.log('request', request);
        return this._queryAnnoucementDealer(request, announceQueryOptions)
    }

    private _queryAnnoucementDealer = (request: IRequest, announceQueryOptions: AnnouncementParams) => {
        let reqOptions = this._getReqOptionsGet(request)
        let now = Moment()
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['rejectUnauthorized'] = false
    
        reqOptions['uri'] =
          this.options['baseUrl'] +
          this.options.urlList['x-path-getAnnouncementDealer'] +
          '?dealerCode=' +
          announceQueryOptions.dealerCode
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

}
