import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import {BaseRequestRepository} from "./base-request-repository"
import {
    SplitOrderParams, 
    IRepository, 
    IRequest
} from "./../interfaces"
require('tls').DEFAULT_CIPHERS= 'RSA'

export class SplitOrderRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.splitOrder',
            method: this.splitOrder,
            options: {
              callback: false
            }
        })
    }
    
    private splitOrder = (request: any) => {
        let splitOrderQueryOptions: SplitOrderParams = {
          sessionId: request.payload.sessionId,
          userid: request.payload.userid,
          dealerCode: request.payload.dealerCode,
          locationCode: request.payload.locationCode,
          customerGroup: request.payload.customerGroup,
          distChannel: request.payload.distChannel,
          listCompany: request.payload.listCompany,
          shoppingCartList: request.payload.shoppingCartList,
        }
    
        // console.log('request', request);
        return this._querySplitOrder(request, splitOrderQueryOptions)
    }

    private _querySplitOrder = (request: IRequest, splitOrderQueryOptions: SplitOrderParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-splitOrder']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
          sessionId: splitOrderQueryOptions.sessionId,
          userid: splitOrderQueryOptions.userid,
          dealerCode: splitOrderQueryOptions.dealerCode,
          locationCode: splitOrderQueryOptions.locationCode,
          customerGroup: splitOrderQueryOptions.customerGroup,
          distChannel: splitOrderQueryOptions.distChannel,
          listCompany: splitOrderQueryOptions.listCompany,
          shoppingCartList: splitOrderQueryOptions.shoppingCartList,
        }
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

}
