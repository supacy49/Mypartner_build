import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import * as Fs from 'fs'
import { BaseRequestRepository } from "./base-request-repository"
import {
    UpdateVesionParams,
    IRepository,
    IRequest
} from "./../interfaces"
require('tls').DEFAULT_CIPHERS = 'RSA'

export class VersionCheckRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.getUpdateVersion',
            method: this.getUpdateVersion,
            options: {
                callback: false
            }
        })
    }

    private getUpdateVersion = (request: any) => {
        let searchApiQueryOptions: UpdateVesionParams = {
            platform: request.payload.platform
        }
        return this._queryGetUpdateVesion(request, searchApiQueryOptions)
    }

    private _queryGetUpdateVesion = (request: IRequest, searchApiQueryOptions: UpdateVesionParams): Bluebird<any> => {

        console.log('== _queryGetUpdateVesion ==');
        let reqOptions = this._getReqOptionsPost(request)
        reqOptions['uri'] = "/api/getUpdateVersion";
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
            platform: searchApiQueryOptions.platform,
        }
        const loggerName = 'mychannel-service'

        var $this = this

        console.log("reqOptions", reqOptions)
        let platform = searchApiQueryOptions.platform
        let fileName = '';
        if (platform === 'android') {
            fileName = 'android-version.json'
        } else if (platform === 'ios') {
            fileName = 'ios-version.json'
        }
        let responsePromise = new Promise(function (resolve, reject) {
            var file;
            var obj
            Fs.readFile(fileName, 'utf8', function (err, data) {
                if (err) throw err;
                file = JSON.parse(data);
                obj = {
                    "body": {
                        "resultCode": "S",
                        "resultMessage": "Success",
                        "resultResponse": file
                    }
                }
                $this.sendLog(reqOptions, loggerName, obj)

                resolve(obj)
            });

        });
        return responsePromise
    }

}
