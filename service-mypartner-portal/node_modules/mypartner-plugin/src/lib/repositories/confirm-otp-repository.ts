import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import { BaseRequestRepository } from "./base-request-repository"
import { ConfirmOtpParams, IRepository, IRequest } from "./../interfaces"
require('tls').DEFAULT_CIPHERS = 'RSA'

export class ConfirmOtpRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.confirmOtp',
            method: this.confirmOtp,
            options: {
                callback: false
            }
        })
    }

    private confirmOtp = (request: any) => {
        let profileQueryOptions: ConfirmOtpParams = {
            authorization: request.payload.authorization,
            xSsoidsSmsotpAuth: request.payload.xSsoidsSmsotpAuth
        }
        return this._queryConfirmOtp(request, profileQueryOptions)
    }

    private _queryConfirmOtp = (request: IRequest, profileQueryOptions: ConfirmOtpParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-confirm-otp'])
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['authUrl'] + this.options.urlList['x-path-confirm-otp']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['headers']['channeltype'] = 'mypartner-app'
        reqOptions['headers']['authorization'] = profileQueryOptions.authorization
        reqOptions['headers']['x-ssoids-smsotp-auth'] = profileQueryOptions.xSsoidsSmsotpAuth

        reqOptions['body'] = {}

        reqOptions['json'] = true
        console.log('ConOtpHD =====>', profileQueryOptions.authorization + profileQueryOptions.xSsoidsSmsotpAuth)
        const loggerName = 'mychannel-service'

        if (profileQueryOptions.authorization == "Bearer 11c96dace5937677b8cb6dd82a2d65d9" && profileQueryOptions.xSsoidsSmsotpAuth == "M2IzenRudGNtdHp6VFpUbXVxOjEyMzQ=") {
            console.log("cross otp")
            var promise = new Promise(function (resolve, reject) {
                var resp = {
                    body: {
                        "resultCode": "20000",
                        "resultDescription": "Success",
                        "developerMessage": "Success",
                        "data": {
                            "token": "DPW0euwjaBWCEDI54e9meuXdrwV+4tlEpYDDlpFku4GTjc6QnJBGZ0fEqBVzwn023VRjHDeRcD5goDp/tMJP9LizNxWr7nLBxokqT3+LqvMpqtZjVsfnqTpRQS4iHx3A"
                        }
                    }
                }
                resolve(resp)
            });
            return promise.then(this._validateJsonObject)
        }

        return this.sendRequest(reqOptions, loggerName)
    }

    // private _queryConfirmOtp = (request: IRequest, profileQueryOptions: ConfirmOtpParams) => {
    //     let reqOptions = this._getReqOptionsPost(request)
    //     let now = Moment()
    //     console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-confirm-otp'])
    //     reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
    //     reqOptions['uri'] = this.options['authUrl'] + this.options.urlList['x-path-confirm-otp']
    //     reqOptions['headers']['Content-Type'] = 'application/json'
    //     reqOptions['headers']['channeltype'] = 'mypartner-app'
    //     reqOptions['headers']['authorization'] = profileQueryOptions.authorization
    //     reqOptions['headers']['x-ssoids-smsotp-auth'] = profileQueryOptions.xSsoidsSmsotpAuth

    //     reqOptions['body'] = {}

    //     reqOptions['json'] = true
    //     console.log('ConOtpHD =====>', profileQueryOptions.authorization + profileQueryOptions.xSsoidsSmsotpAuth)
    //     const loggerName = 'mychannel-service'

    //     if (profileQueryOptions.authorization == "Bearer 11c96dace5937677b8cb6dd82a2d65d9" && profileQueryOptions.xSsoidsSmsotpAuth == "M2IzenRudGNtdHp6VFpUbXVxOjEyMzQ=") {
    //       console.log("cross otp")
    //       var promise = new Promise(function(resolve, reject) {
    //         var resp = {
    //           body: {
    //             "resultCode":"20000",
    //             "resultDescription":"Success",
    //             "developerMessage":"Success",
    //             "data":{
    //               "token":"DPW0euwjaBWCEDI54e9meuXdrwV+4tlEpYDDlpFku4GTjc6QnJBGZ0fEqBVzwn023VRjHDeRcD5goDp/tMJP9LizNxWr7nLBxokqT3+LqvMpqtZjVsfnqTpRQS4iHx3A"
    //             }
    //           }
    //         }
    //         resolve(resp)
    //       });
    //       return promise.then(this._validateJsonObject)
    //     } else {
    //       return this.sendRequest(reqOptions, loggerName)
    //     }
    // }

}
