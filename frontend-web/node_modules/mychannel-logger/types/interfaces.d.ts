import * as Hapi from "hapi";
export interface IRegister {
    (server: Hapi.Server, options: IEventOption, next: any): void;
    attributes?: any;
}
export interface IEventOption {
    log: any;
    headers: Array<string>;
    hiddenFields: Array<string>;
}
export interface ILogOption {
    path: string;
    rotateTime: number;
    serviceNames?: Array<string>;
}
export interface ILoggerData {
    name: string;
    timestamp: string;
    request: {
        id: string;
        ip: string;
        apiRequestId: string;
        method: string;
        uri: string;
        headers: any;
        params: any;
        body: any;
    };
    response: {
        status: number;
        body: any;
        time: number;
    };
    error: {
        message: string;
        instance: string;
    };
}
export interface IInfoLog {
    timestamp: string;
    id: string;
    ip: Hapi.IDictionary<string> | string;
    requestId: Hapi.IDictionary<string> | string;
    requestMethod: string;
    requestUri: string;
    requestHeaders: Hapi.IDictionary<string>;
    requestParams: Hapi.IDictionary<string>;
    requestBody: Object;
    responseStatus: number;
    responseBody: any;
    responseTime: number;
    clientModule: string;
    clientPageName: string;
    clientAction: string;
    clientPageUrl: string;
}
export interface IAccessLog {
    timestamp: string;
    id: string;
    ip: Hapi.IDictionary<string> | string;
    requestId: Hapi.IDictionary<string> | string;
    requestMethod: string;
    requestUri: string;
    requestHeaders: Hapi.IDictionary<string>;
    requestParams: Hapi.IDictionary<string>;
    requestBody: Object;
}
export interface IRootLog {
    timestamp: string;
    id: string;
    ip: Hapi.IDictionary<string> | string;
    requestId: Hapi.IDictionary<string> | string;
    logMessage: string;
}
export interface IErrorLog {
    timestamp: string;
    id: string;
    ip: Hapi.IDictionary<string> | string;
    requestId: Hapi.IDictionary<string> | string;
}
export interface IServiceLog {
    name: string;
    timestamp: string;
    id: string;
    ip: Hapi.IDictionary<string> | string;
    requestId: Hapi.IDictionary<string> | string;
    requestMethod: string;
    requestUri: string;
    requestHeaders: Hapi.IDictionary<string>;
    requestParams: Hapi.IDictionary<string>;
    requestBody: Object;
    responseStatus: number;
    responseBody: any;
    responseTime: number;
    errorMessage: string;
    errorInstance: string;
}
