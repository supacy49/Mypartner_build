"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mkdirp = require("mkdirp");
const path = require("path");
const Moment = require("moment");
const format_1 = require("./format");
const winston = require("winston");
class Logger {
    constructor(logOption) {
        this.timestampFormat = "YYYYMMDD_HHmm";
        this.accessLog = (message) => {
            let logger = this.createLogger('access', null);
            logger.info(this.loggerFormat.accessLogFormat(message));
            logger.close();
        };
        this.infoLog = (message) => {
            let logger = this.createLogger('info', null);
            logger.info(this.loggerFormat.infoLogFormat(message));
            logger.close();
            logger.clear();
        };
        this.rootLog = (message) => {
            let logger = this.createLogger('root', null);
            logger.info(this.loggerFormat.rootLogFormat(message));
        };
        this.serviceLog = (message) => {
            let logger = this.createLogger('service', message.name);
            logger.info(this.loggerFormat.serviceLogFormat(message));
            logger.close();
            logger.clear();
        };
        this.createLogger = (logType, serviceName) => {
            let _timestamp = this.getTimestamp();
            let dirPath = path.join(this.logOption.path, logType, (serviceName || ''));
            mkdirp.sync(dirPath);
            const transports = new winston.transports.File({
                filename: `${serviceName || logType}.log.${_timestamp}`,
                dirname: dirPath,
                format: winston.format.printf(options => options.message ? options.message : '')
            });
            this.winstonInstance.add(transports);
            return this.winstonInstance;
        };
        this.getTimestamp = () => {
            let timestamp = Moment();
            let minute = timestamp.minute();
            minute = (Math.floor(minute / this.logOption.rotateTime) * this.logOption.rotateTime);
            timestamp.minute(minute);
            return timestamp.format(this.timestampFormat);
        };
        this.winstonInstance = this.createWinstonLogger();
        this.loggerFormat = new format_1.LoggerFormat(null, null);
        this.logOption = logOption;
    }
    createWinstonLogger(options) {
        return winston.createLogger(options);
    }
    emptyLogFormat(logType, serviceName) {
        let pipe;
        switch (logType) {
            case 'access':
                pipe = `-|-|-|-|-|-|-|-|-|`; //9
                break;
            case 'info':
                pipe = `-|-|-|-|-|-|-|-|-|-|-|-|`; //12
                break;
            case 'root':
                pipe = `|-|-|-|-|`; // 5
                break;
            case 'service':
                pipe = `-|-|-|-|-|-|-|-|-|-|-|-|-|-|`; //14
                break;
            default:
                break;
        }
        let logger = this.createLogger(logType, serviceName);
        logger.info(pipe);
        logger.close();
        logger.clear();
        return pipe;
    }
}
exports.default = Logger;
