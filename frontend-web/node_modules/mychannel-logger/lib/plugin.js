"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const format_1 = require("./format");
const events_1 = require("./events");
const logger_1 = require("./logger");
class LoggerRegister {
    constructor() {
        this.register = (server, options, next) => {
            this._register(server, options);
            next();
        };
        this.writeEmptyLog = (options, isShowServiceLog) => {
            this.logger = new logger_1.default(options);
            this.loggerFormat = new format_1.LoggerFormat(null, null);
            this.logger.emptyLogFormat('info', null);
            this.logger.emptyLogFormat('access', null);
            this.logger.emptyLogFormat('root', null);
            if (isShowServiceLog) {
                options.serviceNames.forEach((serviceName) => {
                    this.logger.emptyLogFormat('service', serviceName);
                });
            }
        };
        this.register.attributes = this._attributes();
    }
    _attributes() {
        return {
            pkg: require('../package.json')
        };
    }
    _register(server, options) {
        server.register({
            register: require('good'),
            options: {
                ops: false,
                reporters: {
                    consoleReporter: [
                        {
                            module: 'good-squeeze',
                            name: 'Squeeze',
                            args: [
                                {
                                    error: '*',
                                    log: '*',
                                    response: '*',
                                    request: '*'
                                }
                            ]
                        }, {
                            module: 'good-console'
                        },
                        'stdout'
                    ]
                }
            }
        }, (err) => {
            if (err) {
                return console.error(err);
            }
            events_1.EventLogger.init(server, options);
        });
    }
    errorInit(error) {
        if (error) {
            console.log('Error: Failed to load plugin (LoggerRegister):', error);
        }
    }
}
exports.default = LoggerRegister;
