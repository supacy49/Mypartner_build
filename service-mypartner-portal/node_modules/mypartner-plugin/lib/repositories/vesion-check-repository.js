"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Fs = require("fs");
const base_request_repository_1 = require("./base-request-repository");
require('tls').DEFAULT_CIPHERS = 'RSA';
class VersionCheckRepository extends base_request_repository_1.BaseRequestRepository {
    constructor() {
        super(...arguments);
        this.registerMethod = () => {
            this.server.method({
                name: 'Regis.getUpdateVersion',
                method: this.getUpdateVersion,
                options: {
                    callback: false
                }
            });
        };
        this.getUpdateVersion = (request) => {
            let searchApiQueryOptions = {
                platform: request.payload.platform
            };
            return this._queryGetUpdateVesion(request, searchApiQueryOptions);
        };
        this._queryGetUpdateVesion = (request, searchApiQueryOptions) => {
            console.log('== _queryGetUpdateVesion ==');
            let reqOptions = this._getReqOptionsPost(request);
            reqOptions['uri'] = "/api/getUpdateVersion";
            reqOptions['headers']['Content-Type'] = 'application/json';
            reqOptions['body'] = {
                platform: searchApiQueryOptions.platform,
            };
            const loggerName = 'mychannel-service';
            var $this = this;
            console.log("reqOptions", reqOptions);
            let platform = searchApiQueryOptions.platform;
            let fileName = '';
            if (platform === 'android') {
                fileName = 'android-version.json';
            }
            else if (platform === 'ios') {
                fileName = 'ios-version.json';
            }
            let responsePromise = new Promise(function (resolve, reject) {
                var file;
                var obj;
                Fs.readFile(fileName, 'utf8', function (err, data) {
                    if (err)
                        throw err;
                    file = JSON.parse(data);
                    obj = {
                        "body": {
                            "resultCode": "S",
                            "resultMessage": "Success",
                            "resultResponse": file
                        }
                    };
                    $this.sendLog(reqOptions, loggerName, obj);
                    resolve(obj);
                });
            });
            return responsePromise;
        };
    }
}
exports.VersionCheckRepository = VersionCheckRepository;
//# sourceMappingURL=vesion-check-repository.js.map