import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import { BaseRequestRepository } from "./base-request-repository"
import { updatePaymentCashParams, IRepository, IRequest, QueryPaymentCash, ReleaseOrder } from "./../interfaces"
require('tls').DEFAULT_CIPHERS = 'RSA'

export class ReleaseOrderRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.queryAccBlock',
            method: this.queryAccBlock,
            options: {
                callback: false
            }
        })

        this.server.method({
            name: 'Regis.releaseOrder',
            method: this.releaseOrder,
            options: {
                callback: false
            }
        })
    }

    private queryAccBlock = (request: any) => {
        let profileQueryOptions: QueryPaymentCash = {
            dealerCode: request.payload.dealerCode,
            listCompany: request.payload.listCompany,
            listPaymentMethod: request.payload.listPaymentMethod,
        }
        return this._queryAccBlock(request, profileQueryOptions)
    }


    private releaseOrder = (request: any) => {
        let profileQueryOptions: ReleaseOrder = {
            userId: request.payload.userId,
            dealerCode: request.payload.dealerCode,
            listUnBlockOrder: request.payload.listUnBlockOrder
        }
        return this._releaseOrder(request, profileQueryOptions)
    }

    private _queryAccBlock = (request: IRequest, profileQueryOptions: QueryPaymentCash) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['rejectUnauthorized'] = false

        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-queryAccBlock']
        reqOptions['headers']['Content-Type'] = 'application/json'

        reqOptions['body'] = {
            dealerCode: profileQueryOptions.dealerCode,
            listCompany: profileQueryOptions.listCompany,
            listPaymentMethod: profileQueryOptions.listPaymentMethod,
        }

        reqOptions['json'] = true

        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

    private _releaseOrder = (request: IRequest, profileQueryOptions: ReleaseOrder) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['rejectUnauthorized'] = false

        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-releaseOrder']
        reqOptions['headers']['Content-Type'] = 'application/json'

        reqOptions['body'] = {
            userId: profileQueryOptions.userId,
            dealerCode: profileQueryOptions.dealerCode,
            listUnBlockOrder: profileQueryOptions.listUnBlockOrder
        }

        reqOptions['json'] = true

        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }
}
