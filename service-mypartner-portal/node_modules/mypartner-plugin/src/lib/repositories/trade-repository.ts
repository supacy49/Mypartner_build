import * as Bluebird from "bluebird";
import * as Moment from 'moment'
import {BaseRequestRepository} from "./base-request-repository"
import {
    TradeDetailParams, 
    TradeFilterParams,
    CalTradeNormalParams, 
    IRepository, 
    IRequest
} from "./../interfaces"
require('tls').DEFAULT_CIPHERS= 'RSA'

export class TradeRepository extends BaseRequestRepository implements IRepository {

    public registerMethod = (): void => {
        this.server.method({
            name: 'Regis.getTradeDetail',
            method: this.getTradeDetail,
            options: {
              callback: false
            }
        })

        this.server.method({
            name: 'Regis.tradeFilter',
            method: this.tradeFilter,
            options: {
              callback: false
            }
        })

        this.server.method({
            name: 'Regis.calTradeNormal',
            method: this.calTradeNormal,
            options: {
              callback: false
            }
        })
    }
    
    private getTradeDetail = (request: any) => {
        let tradeDetailQueryOptions: TradeDetailParams = {
          sessionId: request.payload.sessionId,
          company: request.payload.company,
          tradeMstId: request.payload.tradeMstId,
          tradeNo: request.payload.tradeNo,
          paymentMethod: request.payload.paymentMethod,
          dealerCode: request.payload.dealerCode,
          locationCode: request.payload.locationCode,
          customerGroup: request.payload.customerGroup,
          distChannel: request.payload.distChannel,
          listPermission: request.payload.listPermission
        }
    
        // console.log('request', request);
        return this._queryGetTradeDetail(request, tradeDetailQueryOptions)
    }


    private tradeFilter = (request: any) => {
        let tradeFilterQueryOptions: TradeFilterParams = {
          sessionId: request.payload.sessionId,
          dealerCode: request.payload.dealerCode,
          locationCode: request.payload.locationCode,
          customerGroup: request.payload.customerGroup,
          distChannel: request.payload.distChannel,
          listProduct: request.payload.listProduct    
        }
    
        // console.log('request', request);
        return this._queryTradeFilter(request, tradeFilterQueryOptions)
    }
    
    private calTradeNormal = (request: any) => {
        let calTradeNormalQueryOptions: CalTradeNormalParams = {
          sessionId: request.payload.sessionId,
          userid: request.payload.userid,
          dealerCode: request.payload.dealerCode,
          locationCode: request.payload.locationCode,
          customerGroup: request.payload.customerGroup,
          distChannel: request.payload.distChannel,
          tradeId: request.payload.tradeId,
          tradeCompany: request.payload.tradeCompany,
          tradeProductMstId: request.payload.tradeProductMstId,
          tradeSubType: request.payload.tradeSubType,
          promotionType: request.payload.promotionType,
          paymentMethod: request.payload.paymentMethod,
          listProductBuy: request.payload.listProductBuy,
          listZtdmRomInfoTw: request.payload.listZtdmRomInfoTw,
        }
    
        // console.log('request', request);
        return this._queryCalTradeNormal(request, calTradeNormalQueryOptions)
    }
    
    private _queryGetTradeDetail = (request: IRequest, profileQueryOptions: TradeDetailParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-tradeDetail']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
          sessionId: profileQueryOptions.sessionId,
          company: profileQueryOptions.company,
          tradeMstId: profileQueryOptions.tradeMstId,
          tradeNo: profileQueryOptions.tradeNo,
          paymentMethod: profileQueryOptions.paymentMethod,
          dealerCode: profileQueryOptions.dealerCode,
          locationCode: profileQueryOptions.locationCode,
          customerGroup: profileQueryOptions.customerGroup,
          distChannel: profileQueryOptions.distChannel,
          listPermission: profileQueryOptions.listPermission
        }
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

    private _queryTradeFilter = (request: IRequest, tradeFilterQueryOptions: TradeFilterParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-tradeFilter']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
          sessionId: tradeFilterQueryOptions.sessionId,
          dealerCode: tradeFilterQueryOptions.dealerCode,
          locationCode: tradeFilterQueryOptions.locationCode,
          customerGroup: tradeFilterQueryOptions.customerGroup,
          distChannel: tradeFilterQueryOptions.distChannel,
          listProduct: tradeFilterQueryOptions.listProduct
        }
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }

    private _queryCalTradeNormal = (request: IRequest, calTradeNormalQueryOptions: CalTradeNormalParams) => {
        let reqOptions = this._getReqOptionsPost(request)
        let now = Moment()
        // console.log('ConOtp =====>', this.options['authUrl'] + this.options.urlList['x-path-listProductCatalog'])
        reqOptions['certificate'] = 'tradingservice3.ais.co.th_2017.cer'
        reqOptions['uri'] = this.options['baseUrl'] + this.options.urlList['x-path-calTradeNormal']
        reqOptions['headers']['Content-Type'] = 'application/json'
        reqOptions['body'] = {
            sessionId: calTradeNormalQueryOptions.sessionId,
            userid: calTradeNormalQueryOptions.userid,
            dealerCode: calTradeNormalQueryOptions.dealerCode,
            locationCode: calTradeNormalQueryOptions.locationCode,
            customerGroup: calTradeNormalQueryOptions.customerGroup,
            distChannel: calTradeNormalQueryOptions.distChannel,
            tradeId: calTradeNormalQueryOptions.tradeId,
            tradeCompany: calTradeNormalQueryOptions.tradeCompany,
            tradeProductMstId: calTradeNormalQueryOptions.tradeProductMstId,
            tradeSubType: calTradeNormalQueryOptions.tradeSubType,
            promotionType: calTradeNormalQueryOptions.promotionType,
            paymentMethod: calTradeNormalQueryOptions.paymentMethod,
            listProductBuy: calTradeNormalQueryOptions.listProductBuy,
            listZtdmRomInfoTw: calTradeNormalQueryOptions.listZtdmRomInfoTw,
        }
        reqOptions['json'] = true
        const loggerName = 'tdm-service'
        return this.sendRequest(reqOptions, loggerName)
    }
}
